/* automatically generated by rust-bindgen */
#![allow(
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    dead_code,
    clippy::missing_safety_doc
)]

pub type HANDLE = *mut ::std::os::raw::c_void;
pub type PHANDLE = *mut HANDLE;
pub type ULONG = ::std::os::raw::c_ulong;
pub type PULONG = *mut ULONG;
pub type USHORT = ::std::os::raw::c_ushort;
pub type PUSHORT = *mut USHORT;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type PUCHAR = *mut UCHAR;
pub type PSZ = *mut ::std::os::raw::c_char;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type FLOAT = f32;
pub type PFLOAT = *mut FLOAT;
pub type PBOOL = *mut BOOL;
pub type LPBOOL = *mut BOOL;
pub type PBYTE = *mut BYTE;
pub type LPBYTE = *mut BYTE;
pub type PINT = *mut ::std::os::raw::c_int;
pub type LPINT = *mut ::std::os::raw::c_int;
pub type PWORD = *mut WORD;
pub type LPWORD = *mut WORD;
pub type LPLONG = *mut ::std::os::raw::c_long;
pub type PDWORD = *mut DWORD;
pub type LPDWORD = *mut DWORD;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type LPCVOID = *const ::std::os::raw::c_void;
pub type INT = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type PUINT = *mut ::std::os::raw::c_uint;
pub type BOOLEAN = BYTE;
pub type PBOOLEAN = *mut BOOLEAN;
pub type NTSTATUS = LONG;
pub type PNTSTATUS = *mut NTSTATUS;
pub type POINTER_64_INT = ::std::os::raw::c_ulonglong;
pub type INT8 = ::std::os::raw::c_schar;
pub type PINT8 = *mut ::std::os::raw::c_schar;
pub type INT16 = ::std::os::raw::c_short;
pub type PINT16 = *mut ::std::os::raw::c_short;
pub type INT32 = ::std::os::raw::c_int;
pub type PINT32 = *mut ::std::os::raw::c_int;
pub type INT64 = ::std::os::raw::c_longlong;
pub type PINT64 = *mut ::std::os::raw::c_longlong;
pub type UINT8 = ::std::os::raw::c_uchar;
pub type PUINT8 = *mut ::std::os::raw::c_uchar;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type PUINT16 = *mut ::std::os::raw::c_ushort;
pub type UINT32 = ::std::os::raw::c_uint;
pub type PUINT32 = *mut ::std::os::raw::c_uint;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type PUINT64 = *mut ::std::os::raw::c_ulonglong;
pub type LONG32 = ::std::os::raw::c_int;
pub type PLONG32 = *mut ::std::os::raw::c_int;
pub type ULONG32 = ::std::os::raw::c_uint;
pub type PULONG32 = *mut ::std::os::raw::c_uint;
pub type DWORD32 = ::std::os::raw::c_uint;
pub type PDWORD32 = *mut ::std::os::raw::c_uint;
pub type INT_PTR = ::std::os::raw::c_longlong;
pub type PINT_PTR = *mut ::std::os::raw::c_longlong;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type PUINT_PTR = *mut ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type PLONG_PTR = *mut ::std::os::raw::c_longlong;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type PULONG_PTR = *mut ::std::os::raw::c_ulonglong;
pub type PHANDLE64 = *mut *mut ::std::os::raw::c_void;
pub type SHANDLE_PTR = ::std::os::raw::c_longlong;
pub type HANDLE_PTR = ::std::os::raw::c_ulonglong;
pub type UHALF_PTR = ::std::os::raw::c_uint;
pub type PUHALF_PTR = *mut ::std::os::raw::c_uint;
pub type HALF_PTR = ::std::os::raw::c_int;
pub type PHALF_PTR = *mut ::std::os::raw::c_int;
pub type SIZE_T = ULONG_PTR;
pub type PSIZE_T = *mut ULONG_PTR;
pub type SSIZE_T = LONG_PTR;
pub type PSSIZE_T = *mut LONG_PTR;
pub type DWORD_PTR = ULONG_PTR;
pub type PDWORD_PTR = *mut ULONG_PTR;
pub type LONG64 = ::std::os::raw::c_longlong;
pub type PLONG64 = *mut ::std::os::raw::c_longlong;
pub type ULONG64 = ::std::os::raw::c_ulonglong;
pub type PULONG64 = *mut ::std::os::raw::c_ulonglong;
pub type DWORD64 = ::std::os::raw::c_ulonglong;
pub type PDWORD64 = *mut ::std::os::raw::c_ulonglong;
pub type KAFFINITY = ULONG_PTR;
pub type PKAFFINITY = *mut KAFFINITY;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type CHAR = ::std::os::raw::c_char;
pub type SHORT = ::std::os::raw::c_short;
pub type LONG = ::std::os::raw::c_long;
pub type WCHAR = u16;
pub type PWCHAR = *mut WCHAR;
pub type LPWCH = *mut WCHAR;
pub type PWCH = *mut WCHAR;
pub type LPCWCH = *const WCHAR;
pub type PCWCH = *const WCHAR;
pub type NWPSTR = *mut WCHAR;
pub type LPWSTR = *mut WCHAR;
pub type PWSTR = *mut WCHAR;
pub type PZPWSTR = *mut PWSTR;
pub type PCZPWSTR = *const PWSTR;
pub type LPUWSTR = *mut WCHAR;
pub type PUWSTR = *mut WCHAR;
pub type LPCWSTR = *const WCHAR;
pub type PCWSTR = *const WCHAR;
pub type PZPCWSTR = *mut PCWSTR;
pub type PCZPCWSTR = *const PCWSTR;
pub type LPCUWSTR = *const WCHAR;
pub type PCUWSTR = *const WCHAR;
pub type PZZWSTR = *mut WCHAR;
pub type PCZZWSTR = *const WCHAR;
pub type PUZZWSTR = *mut WCHAR;
pub type PCUZZWSTR = *const WCHAR;
pub type PNZWCH = *mut WCHAR;
pub type PCNZWCH = *const WCHAR;
pub type PUNZWCH = *mut WCHAR;
pub type PCUNZWCH = *const WCHAR;
pub type LPCWCHAR = *const WCHAR;
pub type PCWCHAR = *const WCHAR;
pub type LPCUWCHAR = *const WCHAR;
pub type PCUWCHAR = *const WCHAR;
pub type UCSCHAR = ::std::os::raw::c_ulong;
pub type PUCSCHAR = *mut UCSCHAR;
pub type PCUCSCHAR = *const UCSCHAR;
pub type PUCSSTR = *mut UCSCHAR;
pub type PUUCSSTR = *mut UCSCHAR;
pub type PCUCSSTR = *const UCSCHAR;
pub type PCUUCSSTR = *const UCSCHAR;
pub type PUUCSCHAR = *mut UCSCHAR;
pub type PCUUCSCHAR = *const UCSCHAR;
pub type PCHAR = *mut CHAR;
pub type LPCH = *mut CHAR;
pub type PCH = *mut CHAR;
pub type LPCCH = *const CHAR;
pub type PCCH = *const CHAR;
pub type NPSTR = *mut CHAR;
pub type LPSTR = *mut CHAR;
pub type PSTR = *mut CHAR;
pub type PZPSTR = *mut PSTR;
pub type PCZPSTR = *const PSTR;
pub type LPCSTR = *const CHAR;
pub type PCSTR = *const CHAR;
pub type PZPCSTR = *mut PCSTR;
pub type PCZPCSTR = *const PCSTR;
pub type PZZSTR = *mut CHAR;
pub type PCZZSTR = *const CHAR;
pub type PNZCH = *mut CHAR;
pub type PCNZCH = *const CHAR;
pub type TCHAR = ::std::os::raw::c_char;
pub type PTCHAR = *mut ::std::os::raw::c_char;
pub type TBYTE = ::std::os::raw::c_uchar;
pub type PTBYTE = *mut ::std::os::raw::c_uchar;
pub type LPTCH = LPCH;
pub type PTCH = LPCH;
pub type LPCTCH = LPCCH;
pub type PCTCH = LPCCH;
pub type PTSTR = LPSTR;
pub type LPTSTR = LPSTR;
pub type PUTSTR = LPSTR;
pub type LPUTSTR = LPSTR;
pub type PCTSTR = LPCSTR;
pub type LPCTSTR = LPCSTR;
pub type PCUTSTR = LPCSTR;
pub type LPCUTSTR = LPCSTR;
pub type PZZTSTR = PZZSTR;
pub type PUZZTSTR = PZZSTR;
pub type PCZZTSTR = PCZZSTR;
pub type PCUZZTSTR = PCZZSTR;
pub type PZPTSTR = PZPSTR;
pub type PNZTCH = PNZCH;
pub type PUNZTCH = PNZCH;
pub type PCNZTCH = PCNZCH;
pub type PCUNZTCH = PCNZCH;
pub type PSHORT = *mut SHORT;
pub type PLONG = *mut LONG;
pub type HRESULT = ::std::os::raw::c_long;
pub type LONGLONG = ::std::os::raw::c_longlong;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
pub type PLONGLONG = *mut LONGLONG;
pub type PULONGLONG = *mut ULONGLONG;
pub type USN = LONGLONG;
pub const FILE_FLUSH_MODE_FILE_FLUSH_DEFAULT: FILE_FLUSH_MODE = 0;
pub const FILE_FLUSH_MODE_FILE_FLUSH_DATA: FILE_FLUSH_MODE = 1;
pub const FILE_FLUSH_MODE_FILE_FLUSH_MIN_METADATA: FILE_FLUSH_MODE = 2;
pub const FILE_FLUSH_MODE_FILE_FLUSH_NO_SYNC: FILE_FLUSH_MODE = 3;
pub type FILE_FLUSH_MODE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Clone)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _LARGE_INTEGER {
    pub __bindgen_anon_1: _LARGE_INTEGER__bindgen_ty_1,
    pub u: _LARGE_INTEGER__bindgen_ty_2,
    pub QuadPart: LONGLONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_1 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER__bindgen_ty_1))
    );
    fn test_field_LowPart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LARGE_INTEGER__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LowPart) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LARGE_INTEGER__bindgen_ty_1),
                "::",
                stringify!(LowPart)
            )
        );
    }
    test_field_LowPart();
    fn test_field_HighPart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LARGE_INTEGER__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HighPart) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_LARGE_INTEGER__bindgen_ty_1),
                "::",
                stringify!(HighPart)
            )
        );
    }
    test_field_HighPart();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_2 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER__bindgen_ty_2))
    );
    fn test_field_LowPart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LARGE_INTEGER__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LowPart) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LARGE_INTEGER__bindgen_ty_2),
                "::",
                stringify!(LowPart)
            )
        );
    }
    test_field_LowPart();
    fn test_field_HighPart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LARGE_INTEGER__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HighPart) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_LARGE_INTEGER__bindgen_ty_2),
                "::",
                stringify!(HighPart)
            )
        );
    }
    test_field_HighPart();
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER() {
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER>(),
        8usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER))
    );
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LARGE_INTEGER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LARGE_INTEGER),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_QuadPart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LARGE_INTEGER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QuadPart) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LARGE_INTEGER),
                "::",
                stringify!(QuadPart)
            )
        );
    }
    test_field_QuadPart();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LIST_ENTRY {
    pub Flink: *mut _LIST_ENTRY,
    pub Blink: *mut _LIST_ENTRY,
}
#[test]
fn bindgen_test_layout__LIST_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<_LIST_ENTRY>(),
        16usize,
        concat!("Size of: ", stringify!(_LIST_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_LIST_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_LIST_ENTRY))
    );
    fn test_field_Flink() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LIST_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flink) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LIST_ENTRY),
                "::",
                stringify!(Flink)
            )
        );
    }
    test_field_Flink();
    fn test_field_Blink() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LIST_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Blink) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_LIST_ENTRY),
                "::",
                stringify!(Blink)
            )
        );
    }
    test_field_Blink();
}
pub type LIST_ENTRY = _LIST_ENTRY;
pub type PLIST_ENTRY = *mut _LIST_ENTRY;
pub type PRLIST_ENTRY = *mut _LIST_ENTRY;
pub type CCHAR = ::std::os::raw::c_char;
pub type size_t = ::std::os::raw::c_ulonglong;
pub type PSID = PVOID;
pub type PCLAIMS_BLOB = PVOID;
pub type ACCESS_MASK = DWORD;
pub type LARGE_INTEGER = _LARGE_INTEGER;
pub type PLARGE_INTEGER = *mut LARGE_INTEGER;
pub const _IORING_OP_CODE_IORING_OP_NOP: _IORING_OP_CODE = 0;
pub const _IORING_OP_CODE_IORING_OP_READ: _IORING_OP_CODE = 1;
pub const _IORING_OP_CODE_IORING_OP_REGISTER_FILES: _IORING_OP_CODE = 2;
pub const _IORING_OP_CODE_IORING_OP_REGISTER_BUFFERS: _IORING_OP_CODE = 3;
pub const _IORING_OP_CODE_IORING_OP_CANCEL: _IORING_OP_CODE = 4;
pub const _IORING_OP_CODE_IORING_OP_WRITE: _IORING_OP_CODE = 5;
pub const _IORING_OP_CODE_IORING_OP_FLUSH: _IORING_OP_CODE = 6;
pub type _IORING_OP_CODE = ::std::os::raw::c_int;
pub use self::_IORING_OP_CODE as IORING_OP_CODE;
pub const _NT_IORING_OP_FLAGS_NT_IORING_OP_FLAG_NONE: _NT_IORING_OP_FLAGS = 0;
pub const _NT_IORING_OP_FLAGS_NT_IORING_OP_FLAG_REGISTERED_FILE: _NT_IORING_OP_FLAGS = 1;
pub const _NT_IORING_OP_FLAGS_NT_IORING_OP_FLAG_REGISTERED_BUFFER: _NT_IORING_OP_FLAGS = 2;
pub type _NT_IORING_OP_FLAGS = ::std::os::raw::c_int;
pub use self::_NT_IORING_OP_FLAGS as NT_IORING_OP_FLAGS;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_IORING_HANDLEREF {
    pub Handle: u64,
    pub HandleIndex: u64,
}
impl ::core::fmt::Debug for _NT_IORING_HANDLEREF {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        unsafe {
            f.debug_struct("_NT_IORING_HANDLEREF")
                .field("Handle", &self.Handle)
                .finish()
        }
    }
}
#[test]
fn bindgen_test_layout__NT_IORING_HANDLEREF() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_HANDLEREF>(),
        8usize,
        concat!("Size of: ", stringify!(_NT_IORING_HANDLEREF))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_HANDLEREF>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_HANDLEREF))
    );
    fn test_field_Handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_HANDLEREF>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_HANDLEREF),
                "::",
                stringify!(Handle)
            )
        );
    }
    test_field_Handle();
    fn test_field_HandleIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_HANDLEREF>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HandleIndex) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_HANDLEREF),
                "::",
                stringify!(HandleIndex)
            )
        );
    }
    test_field_HandleIndex();
}
pub type NT_IORING_HANDLEREF = _NT_IORING_HANDLEREF;
pub type PNT_IORING_HANDLEREF = *mut _NT_IORING_HANDLEREF;
pub const _NT_IORING_SQE_FLAGS_NT_IORING_SQE_FLAG_NONE: _NT_IORING_SQE_FLAGS = 0;
pub const _NT_IORING_SQE_FLAGS_NT_IORING_SQE_FLAG_DRAIN_PRECEDING_OPS: _NT_IORING_SQE_FLAGS = 1;
pub type _NT_IORING_SQE_FLAGS = ::std::os::raw::c_int;
pub use self::_NT_IORING_SQE_FLAGS as NT_IORING_SQE_FLAGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IORING_REGISTERED_BUFFER {
    pub BufferIndex: u32,
    pub Offset: u32,
}
#[test]
fn bindgen_test_layout__IORING_REGISTERED_BUFFER() {
    assert_eq!(
        ::std::mem::size_of::<_IORING_REGISTERED_BUFFER>(),
        8usize,
        concat!("Size of: ", stringify!(_IORING_REGISTERED_BUFFER))
    );
    assert_eq!(
        ::std::mem::align_of::<_IORING_REGISTERED_BUFFER>(),
        4usize,
        concat!("Alignment of ", stringify!(_IORING_REGISTERED_BUFFER))
    );
    fn test_field_BufferIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IORING_REGISTERED_BUFFER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BufferIndex) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IORING_REGISTERED_BUFFER),
                "::",
                stringify!(BufferIndex)
            )
        );
    }
    test_field_BufferIndex();
    fn test_field_Offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IORING_REGISTERED_BUFFER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_IORING_REGISTERED_BUFFER),
                "::",
                stringify!(Offset)
            )
        );
    }
    test_field_Offset();
}
pub type IORING_REGISTERED_BUFFER = _IORING_REGISTERED_BUFFER;
pub type PIORING_REGISTERED_BUFFER = _IORING_REGISTERED_BUFFER;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_IORING_BUFFERREF {
    pub Address: u64,
    pub FixedBuffer: IORING_REGISTERED_BUFFER,
}
impl ::core::fmt::Debug for _NT_IORING_BUFFERREF {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        unsafe {
            f.debug_struct("_NT_IORING_BUFFERREF")
                .field("Address", &self.Address)
                .finish()
        }
    }
}
#[test]
fn bindgen_test_layout__NT_IORING_BUFFERREF() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_BUFFERREF>(),
        8usize,
        concat!("Size of: ", stringify!(_NT_IORING_BUFFERREF))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_BUFFERREF>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_BUFFERREF))
    );
    fn test_field_Address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_BUFFERREF>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Address) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_BUFFERREF),
                "::",
                stringify!(Address)
            )
        );
    }
    test_field_Address();
    fn test_field_FixedBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_BUFFERREF>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FixedBuffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_BUFFERREF),
                "::",
                stringify!(FixedBuffer)
            )
        );
    }
    test_field_FixedBuffer();
}
pub type NT_IORING_BUFFERREF = _NT_IORING_BUFFERREF;
pub type PNT_IORING_BUFFERREF = *mut _NT_IORING_BUFFERREF;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_IORING_OP_READ {
    pub CommonOpFlags: NT_IORING_OP_FLAGS,
    pub Padding: u32,
    pub File: NT_IORING_HANDLEREF,
    pub Buffer: NT_IORING_BUFFERREF,
    pub Offset: u64,
    pub Length: u32,
    pub Key: u32,
}
#[test]
fn bindgen_test_layout__NT_IORING_OP_READ() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_OP_READ>(),
        40usize,
        concat!("Size of: ", stringify!(_NT_IORING_OP_READ))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_OP_READ>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_OP_READ))
    );
    fn test_field_CommonOpFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_READ>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CommonOpFlags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_READ),
                "::",
                stringify!(CommonOpFlags)
            )
        );
    }
    test_field_CommonOpFlags();
    fn test_field_Padding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_READ>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Padding) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_READ),
                "::",
                stringify!(Padding)
            )
        );
    }
    test_field_Padding();
    fn test_field_File() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_READ>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).File) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_READ),
                "::",
                stringify!(File)
            )
        );
    }
    test_field_File();
    fn test_field_Buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_READ>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_READ),
                "::",
                stringify!(Buffer)
            )
        );
    }
    test_field_Buffer();
    fn test_field_Offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_READ>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_READ),
                "::",
                stringify!(Offset)
            )
        );
    }
    test_field_Offset();
    fn test_field_Length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_READ>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_READ),
                "::",
                stringify!(Length)
            )
        );
    }
    test_field_Length();
    fn test_field_Key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_READ>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Key) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_READ),
                "::",
                stringify!(Key)
            )
        );
    }
    test_field_Key();
}
pub type NT_IORING_OP_READ = _NT_IORING_OP_READ;
pub type PNT_IORING_OP_READ = *mut _NT_IORING_OP_READ;
pub const _NT_IORING_REG_FILES_REQ_FLAGS_NT_IORING_REG_FILES_REQ_FLAG_NONE:
    _NT_IORING_REG_FILES_REQ_FLAGS = 0;
pub type _NT_IORING_REG_FILES_REQ_FLAGS = ::std::os::raw::c_int;
pub use self::_NT_IORING_REG_FILES_REQ_FLAGS as NT_IORING_REG_FILES_REQ_FLAGS;
pub const _NT_IORING_REG_FILES_ADV_FLAGS_NT_IORING_REG_FILES_ADV_FLAG_NONE:
    _NT_IORING_REG_FILES_ADV_FLAGS = 0;
pub type _NT_IORING_REG_FILES_ADV_FLAGS = ::std::os::raw::c_int;
pub use self::_NT_IORING_REG_FILES_ADV_FLAGS as NT_IORING_REG_FILES_ADV_FLAGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NT_IORING_REG_FILES_FLAGS {
    pub Required: NT_IORING_REG_FILES_REQ_FLAGS,
    pub Advisory: NT_IORING_REG_FILES_ADV_FLAGS,
}
#[test]
fn bindgen_test_layout__NT_IORING_REG_FILES_FLAGS() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_REG_FILES_FLAGS>(),
        8usize,
        concat!("Size of: ", stringify!(_NT_IORING_REG_FILES_FLAGS))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_REG_FILES_FLAGS>(),
        4usize,
        concat!("Alignment of ", stringify!(_NT_IORING_REG_FILES_FLAGS))
    );
    fn test_field_Required() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_REG_FILES_FLAGS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Required) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_REG_FILES_FLAGS),
                "::",
                stringify!(Required)
            )
        );
    }
    test_field_Required();
    fn test_field_Advisory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_REG_FILES_FLAGS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Advisory) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_REG_FILES_FLAGS),
                "::",
                stringify!(Advisory)
            )
        );
    }
    test_field_Advisory();
}
pub type NT_IORING_REG_FILES_FLAGS = _NT_IORING_REG_FILES_FLAGS;
pub type PNT_IORING_REG_FILES_FLAGS = *mut _NT_IORING_REG_FILES_FLAGS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_IORING_OP_REGISTER_FILES {
    pub CommonOpFlags: NT_IORING_OP_FLAGS,
    pub Flags: NT_IORING_REG_FILES_FLAGS,
    pub Count: u32,
    pub __bindgen_anon_1: _NT_IORING_OP_REGISTER_FILES__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_IORING_OP_REGISTER_FILES__bindgen_ty_1 {
    pub Handles: *const HANDLE,
    pub PadX86_Handles: u64,
}
#[test]
fn bindgen_test_layout__NT_IORING_OP_REGISTER_FILES__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_OP_REGISTER_FILES__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_NT_IORING_OP_REGISTER_FILES__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_OP_REGISTER_FILES__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_NT_IORING_OP_REGISTER_FILES__bindgen_ty_1)
        )
    );
    fn test_field_Handles() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_NT_IORING_OP_REGISTER_FILES__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Handles) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_REGISTER_FILES__bindgen_ty_1),
                "::",
                stringify!(Handles)
            )
        );
    }
    test_field_Handles();
    fn test_field_PadX86_Handles() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_NT_IORING_OP_REGISTER_FILES__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PadX86_Handles) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_REGISTER_FILES__bindgen_ty_1),
                "::",
                stringify!(PadX86_Handles)
            )
        );
    }
    test_field_PadX86_Handles();
}
#[test]
fn bindgen_test_layout__NT_IORING_OP_REGISTER_FILES() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_OP_REGISTER_FILES>(),
        24usize,
        concat!("Size of: ", stringify!(_NT_IORING_OP_REGISTER_FILES))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_OP_REGISTER_FILES>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_OP_REGISTER_FILES))
    );
    fn test_field_CommonOpFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_REGISTER_FILES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CommonOpFlags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_REGISTER_FILES),
                "::",
                stringify!(CommonOpFlags)
            )
        );
    }
    test_field_CommonOpFlags();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_REGISTER_FILES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_REGISTER_FILES),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_Count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_REGISTER_FILES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_REGISTER_FILES),
                "::",
                stringify!(Count)
            )
        );
    }
    test_field_Count();
}
pub type NT_IORING_OP_REGISTER_FILES = _NT_IORING_OP_REGISTER_FILES;
pub type PNT_IORING_OP_REGISTER_FILES = *mut _NT_IORING_OP_REGISTER_FILES;
pub const _NT_IORING_REG_BUFFERS_REQ_FLAGS_NT_IORING_REG_BUFFERS_REQ_FLAG_NONE:
    _NT_IORING_REG_BUFFERS_REQ_FLAGS = 0;
pub type _NT_IORING_REG_BUFFERS_REQ_FLAGS = ::std::os::raw::c_int;
pub use self::_NT_IORING_REG_BUFFERS_REQ_FLAGS as NT_IORING_REG_BUFFERS_REQ_FLAGS;
pub const _NT_IORING_REG_BUFFERS_ADV_FLAGS_NT_IORING_REG_BUFFERS_ADV_FLAG_NONE:
    _NT_IORING_REG_BUFFERS_ADV_FLAGS = 0;
pub type _NT_IORING_REG_BUFFERS_ADV_FLAGS = ::std::os::raw::c_int;
pub use self::_NT_IORING_REG_BUFFERS_ADV_FLAGS as NT_IORING_REG_BUFFERS_ADV_FLAGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NT_IORING_REG_BUFFERS_FLAGS {
    pub Required: NT_IORING_REG_BUFFERS_REQ_FLAGS,
    pub Advisory: NT_IORING_REG_BUFFERS_ADV_FLAGS,
}
#[test]
fn bindgen_test_layout__NT_IORING_REG_BUFFERS_FLAGS() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_REG_BUFFERS_FLAGS>(),
        8usize,
        concat!("Size of: ", stringify!(_NT_IORING_REG_BUFFERS_FLAGS))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_REG_BUFFERS_FLAGS>(),
        4usize,
        concat!("Alignment of ", stringify!(_NT_IORING_REG_BUFFERS_FLAGS))
    );
    fn test_field_Required() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_REG_BUFFERS_FLAGS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Required) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_REG_BUFFERS_FLAGS),
                "::",
                stringify!(Required)
            )
        );
    }
    test_field_Required();
    fn test_field_Advisory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_REG_BUFFERS_FLAGS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Advisory) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_REG_BUFFERS_FLAGS),
                "::",
                stringify!(Advisory)
            )
        );
    }
    test_field_Advisory();
}
pub type NT_IORING_REG_BUFFERS_FLAGS = _NT_IORING_REG_BUFFERS_FLAGS;
pub type PNT_IORING_REG_BUFFERS_FLAGS = *mut _NT_IORING_REG_BUFFERS_FLAGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IORING_BUFFER_INFO {
    pub Address: *mut ::std::os::raw::c_void,
    pub Length: u32,
}
#[test]
fn bindgen_test_layout__IORING_BUFFER_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_IORING_BUFFER_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(_IORING_BUFFER_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_IORING_BUFFER_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(_IORING_BUFFER_INFO))
    );
    fn test_field_Address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IORING_BUFFER_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Address) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IORING_BUFFER_INFO),
                "::",
                stringify!(Address)
            )
        );
    }
    test_field_Address();
    fn test_field_Length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IORING_BUFFER_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IORING_BUFFER_INFO),
                "::",
                stringify!(Length)
            )
        );
    }
    test_field_Length();
}
pub type IORING_BUFFER_INFO = _IORING_BUFFER_INFO;
pub type PIORING_BUFFER_INFO = _IORING_BUFFER_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_IORING_OP_REGISTER_BUFFERS {
    pub CommonOpFlags: NT_IORING_OP_FLAGS,
    pub Flags: NT_IORING_REG_BUFFERS_FLAGS,
    pub Count: u32,
    pub __bindgen_anon_1: _NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1 {
    pub Buffers: *const IORING_BUFFER_INFO,
    pub PadX86_Buffers: u64,
}
#[test]
fn bindgen_test_layout__NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1)
        )
    );
    fn test_field_Buffers() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buffers) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1),
                "::",
                stringify!(Buffers)
            )
        );
    }
    test_field_Buffers();
    fn test_field_PadX86_Buffers() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PadX86_Buffers) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_REGISTER_BUFFERS__bindgen_ty_1),
                "::",
                stringify!(PadX86_Buffers)
            )
        );
    }
    test_field_PadX86_Buffers();
}
#[test]
fn bindgen_test_layout__NT_IORING_OP_REGISTER_BUFFERS() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_OP_REGISTER_BUFFERS>(),
        24usize,
        concat!("Size of: ", stringify!(_NT_IORING_OP_REGISTER_BUFFERS))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_OP_REGISTER_BUFFERS>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_OP_REGISTER_BUFFERS))
    );
    fn test_field_CommonOpFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_REGISTER_BUFFERS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CommonOpFlags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_REGISTER_BUFFERS),
                "::",
                stringify!(CommonOpFlags)
            )
        );
    }
    test_field_CommonOpFlags();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_REGISTER_BUFFERS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_REGISTER_BUFFERS),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_Count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_REGISTER_BUFFERS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_REGISTER_BUFFERS),
                "::",
                stringify!(Count)
            )
        );
    }
    test_field_Count();
}
pub type NT_IORING_OP_REGISTER_BUFFERS = _NT_IORING_OP_REGISTER_BUFFERS;
pub type PNT_IORING_OP_REGISTER_BUFFERS = *mut _NT_IORING_OP_REGISTER_BUFFERS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_IORING_OP_CANCEL {
    pub CommonOpFlags: NT_IORING_OP_FLAGS,
    pub File: NT_IORING_HANDLEREF,
    pub CancelId: u64,
}
#[test]
fn bindgen_test_layout__NT_IORING_OP_CANCEL() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_OP_CANCEL>(),
        24usize,
        concat!("Size of: ", stringify!(_NT_IORING_OP_CANCEL))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_OP_CANCEL>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_OP_CANCEL))
    );
    fn test_field_CommonOpFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_CANCEL>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CommonOpFlags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_CANCEL),
                "::",
                stringify!(CommonOpFlags)
            )
        );
    }
    test_field_CommonOpFlags();
    fn test_field_File() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_CANCEL>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).File) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_CANCEL),
                "::",
                stringify!(File)
            )
        );
    }
    test_field_File();
    fn test_field_CancelId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_CANCEL>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CancelId) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_CANCEL),
                "::",
                stringify!(CancelId)
            )
        );
    }
    test_field_CancelId();
}
pub type NT_IORING_OP_CANCEL = _NT_IORING_OP_CANCEL;
pub type PNT_IORING_OP_CANCEL = *mut _NT_IORING_OP_CANCEL;
pub const FILE_WRITE_FLAGS_FILE_WRITE_FLAGS_NONE: FILE_WRITE_FLAGS = 0;
pub const FILE_WRITE_FLAGS_FILE_WRITE_FLAGS_WRITE_THROUGH: FILE_WRITE_FLAGS = 1;
pub type FILE_WRITE_FLAGS = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_IORING_OP_WRITE {
    pub CommonOpFlags: NT_IORING_OP_FLAGS,
    pub Flags: FILE_WRITE_FLAGS,
    pub File: NT_IORING_HANDLEREF,
    pub Buffer: NT_IORING_BUFFERREF,
    pub Offset: u64,
    pub Length: u32,
    pub Key: u32,
}
#[test]
fn bindgen_test_layout__NT_IORING_OP_WRITE() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_OP_WRITE>(),
        40usize,
        concat!("Size of: ", stringify!(_NT_IORING_OP_WRITE))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_OP_WRITE>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_OP_WRITE))
    );
    fn test_field_CommonOpFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_WRITE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CommonOpFlags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_WRITE),
                "::",
                stringify!(CommonOpFlags)
            )
        );
    }
    test_field_CommonOpFlags();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_WRITE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_WRITE),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_File() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_WRITE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).File) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_WRITE),
                "::",
                stringify!(File)
            )
        );
    }
    test_field_File();
    fn test_field_Buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_WRITE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_WRITE),
                "::",
                stringify!(Buffer)
            )
        );
    }
    test_field_Buffer();
    fn test_field_Offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_WRITE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_WRITE),
                "::",
                stringify!(Offset)
            )
        );
    }
    test_field_Offset();
    fn test_field_Length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_WRITE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_WRITE),
                "::",
                stringify!(Length)
            )
        );
    }
    test_field_Length();
    fn test_field_Key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_WRITE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Key) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_WRITE),
                "::",
                stringify!(Key)
            )
        );
    }
    test_field_Key();
}
pub type NT_IORING_OP_WRITE = _NT_IORING_OP_WRITE;
pub type PNT_IORING_OP_WRITE = *mut _NT_IORING_OP_WRITE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_IORING_OP_FLUSH {
    pub CommonOpFlags: NT_IORING_OP_FLAGS,
    pub FlushMode: FILE_FLUSH_MODE,
    pub File: NT_IORING_HANDLEREF,
}
#[test]
fn bindgen_test_layout__NT_IORING_OP_FLUSH() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_OP_FLUSH>(),
        16usize,
        concat!("Size of: ", stringify!(_NT_IORING_OP_FLUSH))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_OP_FLUSH>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_OP_FLUSH))
    );
    fn test_field_CommonOpFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_FLUSH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CommonOpFlags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_FLUSH),
                "::",
                stringify!(CommonOpFlags)
            )
        );
    }
    test_field_CommonOpFlags();
    fn test_field_FlushMode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_FLUSH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FlushMode) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_FLUSH),
                "::",
                stringify!(FlushMode)
            )
        );
    }
    test_field_FlushMode();
    fn test_field_File() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_FLUSH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).File) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_FLUSH),
                "::",
                stringify!(File)
            )
        );
    }
    test_field_File();
}
pub type NT_IORING_OP_FLUSH = _NT_IORING_OP_FLUSH;
pub type PNT_IORING_OP_FLUSH = *mut _NT_IORING_OP_FLUSH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NT_IORING_OP_RESERVED {
    pub Argument1: u64,
    pub Argument2: u64,
    pub Argument3: u64,
    pub Argument4: u64,
    pub Argument5: u64,
    pub Argument6: u64,
}
#[test]
fn bindgen_test_layout__NT_IORING_OP_RESERVED() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_OP_RESERVED>(),
        48usize,
        concat!("Size of: ", stringify!(_NT_IORING_OP_RESERVED))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_OP_RESERVED>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_OP_RESERVED))
    );
    fn test_field_Argument1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_RESERVED>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Argument1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_RESERVED),
                "::",
                stringify!(Argument1)
            )
        );
    }
    test_field_Argument1();
    fn test_field_Argument2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_RESERVED>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Argument2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_RESERVED),
                "::",
                stringify!(Argument2)
            )
        );
    }
    test_field_Argument2();
    fn test_field_Argument3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_RESERVED>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Argument3) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_RESERVED),
                "::",
                stringify!(Argument3)
            )
        );
    }
    test_field_Argument3();
    fn test_field_Argument4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_RESERVED>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Argument4) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_RESERVED),
                "::",
                stringify!(Argument4)
            )
        );
    }
    test_field_Argument4();
    fn test_field_Argument5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_RESERVED>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Argument5) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_RESERVED),
                "::",
                stringify!(Argument5)
            )
        );
    }
    test_field_Argument5();
    fn test_field_Argument6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_OP_RESERVED>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Argument6) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_OP_RESERVED),
                "::",
                stringify!(Argument6)
            )
        );
    }
    test_field_Argument6();
}
pub type NT_IORING_OP_RESERVED = _NT_IORING_OP_RESERVED;
pub type PNT_IORING_OP_RESERVED = *mut _NT_IORING_OP_RESERVED;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_IORING_SQE {
    pub OpCode: IORING_OP_CODE,
    pub Flags: NT_IORING_SQE_FLAGS,
    pub UserData: u64,
    pub __bindgen_anon_1: _NT_IORING_SQE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_IORING_SQE__bindgen_ty_1 {
    pub Read: NT_IORING_OP_READ,
    pub RegisterFiles: NT_IORING_OP_REGISTER_FILES,
    pub RegisterBuffers: NT_IORING_OP_REGISTER_BUFFERS,
    pub Cancel: NT_IORING_OP_CANCEL,
    pub Write: NT_IORING_OP_WRITE,
    pub Flush: NT_IORING_OP_FLUSH,
    pub ReservedMaxSizePadding: NT_IORING_OP_RESERVED,
}
#[test]
fn bindgen_test_layout__NT_IORING_SQE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_SQE__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(_NT_IORING_SQE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_SQE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_SQE__bindgen_ty_1))
    );
    fn test_field_Read() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_SQE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Read) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_SQE__bindgen_ty_1),
                "::",
                stringify!(Read)
            )
        );
    }
    test_field_Read();
    fn test_field_RegisterFiles() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_SQE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegisterFiles) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_SQE__bindgen_ty_1),
                "::",
                stringify!(RegisterFiles)
            )
        );
    }
    test_field_RegisterFiles();
    fn test_field_RegisterBuffers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_SQE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegisterBuffers) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_SQE__bindgen_ty_1),
                "::",
                stringify!(RegisterBuffers)
            )
        );
    }
    test_field_RegisterBuffers();
    fn test_field_Cancel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_SQE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Cancel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_SQE__bindgen_ty_1),
                "::",
                stringify!(Cancel)
            )
        );
    }
    test_field_Cancel();
    fn test_field_Write() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_SQE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Write) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_SQE__bindgen_ty_1),
                "::",
                stringify!(Write)
            )
        );
    }
    test_field_Write();
    fn test_field_Flush() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_SQE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flush) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_SQE__bindgen_ty_1),
                "::",
                stringify!(Flush)
            )
        );
    }
    test_field_Flush();
    fn test_field_ReservedMaxSizePadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_SQE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReservedMaxSizePadding) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_SQE__bindgen_ty_1),
                "::",
                stringify!(ReservedMaxSizePadding)
            )
        );
    }
    test_field_ReservedMaxSizePadding();
}
#[test]
fn bindgen_test_layout__NT_IORING_SQE() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_SQE>(),
        64usize,
        concat!("Size of: ", stringify!(_NT_IORING_SQE))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_SQE>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_SQE))
    );
    fn test_field_OpCode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_SQE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OpCode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_SQE),
                "::",
                stringify!(OpCode)
            )
        );
    }
    test_field_OpCode();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_SQE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_SQE),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_UserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_SQE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_SQE),
                "::",
                stringify!(UserData)
            )
        );
    }
    test_field_UserData();
}
pub type NT_IORING_SQE = _NT_IORING_SQE;
pub type PNT_IORING_SQE = *mut _NT_IORING_SQE;
pub const _IORING_VERSION_IORING_VERSION_INVALID: _IORING_VERSION = 0;
pub const _IORING_VERSION_IORING_VERSION_1: _IORING_VERSION = 1;
pub const _IORING_VERSION_IORING_VERSION_2: _IORING_VERSION = 2;
pub const _IORING_VERSION_IORING_VERSION_3: _IORING_VERSION = 300;
pub type _IORING_VERSION = ::std::os::raw::c_int;
pub use self::_IORING_VERSION as IORING_VERSION;
pub const _NT_IORING_CREATE_REQUIRED_FLAGS_NT_IORING_CREATE_REQUIRED_FLAG_NONE:
    _NT_IORING_CREATE_REQUIRED_FLAGS = 0;
pub type _NT_IORING_CREATE_REQUIRED_FLAGS = ::std::os::raw::c_int;
pub use self::_NT_IORING_CREATE_REQUIRED_FLAGS as NT_IORING_CREATE_REQUIRED_FLAGS;
pub const _NT_IORING_CREATE_ADVISORY_FLAGS_NT_IORING_CREATE_ADVISORY_FLAG_NONE:
    _NT_IORING_CREATE_ADVISORY_FLAGS = 0;
pub type _NT_IORING_CREATE_ADVISORY_FLAGS = ::std::os::raw::c_int;
pub use self::_NT_IORING_CREATE_ADVISORY_FLAGS as NT_IORING_CREATE_ADVISORY_FLAGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NT_IORING_CREATE_FLAGS {
    pub Required: NT_IORING_CREATE_REQUIRED_FLAGS,
    pub Advisory: NT_IORING_CREATE_ADVISORY_FLAGS,
}
#[test]
fn bindgen_test_layout__NT_IORING_CREATE_FLAGS() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_CREATE_FLAGS>(),
        8usize,
        concat!("Size of: ", stringify!(_NT_IORING_CREATE_FLAGS))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_CREATE_FLAGS>(),
        4usize,
        concat!("Alignment of ", stringify!(_NT_IORING_CREATE_FLAGS))
    );
    fn test_field_Required() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CREATE_FLAGS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Required) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CREATE_FLAGS),
                "::",
                stringify!(Required)
            )
        );
    }
    test_field_Required();
    fn test_field_Advisory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CREATE_FLAGS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Advisory) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CREATE_FLAGS),
                "::",
                stringify!(Advisory)
            )
        );
    }
    test_field_Advisory();
}
pub type NT_IORING_CREATE_FLAGS = _NT_IORING_CREATE_FLAGS;
pub const _NT_IORING_SQ_FLAGS_NT_IORING_SQ_FLAG_NONE: _NT_IORING_SQ_FLAGS = 0;
pub type _NT_IORING_SQ_FLAGS = ::std::os::raw::c_int;
pub use self::_NT_IORING_SQ_FLAGS as NT_IORING_SQ_FLAGS;
#[repr(C)]
#[derive(Clone)]
pub struct _NT_IORING_SUBMISSION_QUEUE {
    pub Head: u32,
    pub Tail: u32,
    pub Flags: NT_IORING_SQ_FLAGS,
    pub Entries: __IncompleteArrayField<NT_IORING_SQE>,
}
#[test]
fn bindgen_test_layout__NT_IORING_SUBMISSION_QUEUE() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_SUBMISSION_QUEUE>(),
        16usize,
        concat!("Size of: ", stringify!(_NT_IORING_SUBMISSION_QUEUE))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_SUBMISSION_QUEUE>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_SUBMISSION_QUEUE))
    );
}
pub type NT_IORING_SUBMISSION_QUEUE = _NT_IORING_SUBMISSION_QUEUE;
pub type PNT_IORING_SUBMISSION_QUEUE = *mut _NT_IORING_SUBMISSION_QUEUE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_IORING_CQE {
    pub UserData: u64,
    pub __bindgen_anon_1: _NT_IORING_CQE__bindgen_ty_1,
    pub Information: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_IORING_CQE__bindgen_ty_1 {
    pub ResultCode: HRESULT,
    pub Pointer: *mut ::std::os::raw::c_void,
    pub PadX86_Pointer: u64,
}
#[test]
fn bindgen_test_layout__NT_IORING_CQE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_CQE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_NT_IORING_CQE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_CQE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_CQE__bindgen_ty_1))
    );
    fn test_field_ResultCode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CQE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResultCode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CQE__bindgen_ty_1),
                "::",
                stringify!(ResultCode)
            )
        );
    }
    test_field_ResultCode();
    fn test_field_Pointer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CQE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Pointer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CQE__bindgen_ty_1),
                "::",
                stringify!(Pointer)
            )
        );
    }
    test_field_Pointer();
    fn test_field_PadX86_Pointer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CQE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PadX86_Pointer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CQE__bindgen_ty_1),
                "::",
                stringify!(PadX86_Pointer)
            )
        );
    }
    test_field_PadX86_Pointer();
}
#[test]
fn bindgen_test_layout__NT_IORING_CQE() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_CQE>(),
        24usize,
        concat!("Size of: ", stringify!(_NT_IORING_CQE))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_CQE>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_CQE))
    );
    fn test_field_UserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CQE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CQE),
                "::",
                stringify!(UserData)
            )
        );
    }
    test_field_UserData();
    fn test_field_Information() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CQE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Information) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CQE),
                "::",
                stringify!(Information)
            )
        );
    }
    test_field_Information();
}
pub type NT_IORING_CQE = _NT_IORING_CQE;
pub type PNT_IORING_CQE = *mut _NT_IORING_CQE;
#[repr(C)]
#[derive(Clone)]
pub struct _NT_IORING_COMPLETION_QUEUE {
    pub Head: u32,
    pub Tail: u32,
    pub Entries: __IncompleteArrayField<NT_IORING_CQE>,
}

#[test]
fn bindgen_test_layout__NT_IORING_COMPLETION_QUEUE() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_COMPLETION_QUEUE>(),
        8usize,
        concat!("Size of: ", stringify!(_NT_IORING_COMPLETION_QUEUE))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_COMPLETION_QUEUE>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_COMPLETION_QUEUE))
    );
}
pub type NT_IORING_COMPLETION_QUEUE = _NT_IORING_COMPLETION_QUEUE;
pub type PNT_IORING_COMPLETION_QUEUE = *mut _NT_IORING_COMPLETION_QUEUE;
#[repr(C)]
#[derive(Copy, Clone, Debug)]
pub struct _NT_IORING_INFO {
    pub IoRingVersion: IORING_VERSION,
    pub Flags: NT_IORING_CREATE_FLAGS,
    pub SubmissionQueueSize: u32,
    pub SubmissionQueueRingMask: u32,
    pub CompletionQueueSize: u32,
    pub CompletionQueueRingMask: u32,
    pub __bindgen_anon_1: _NT_IORING_INFO__bindgen_ty_1,
    pub __bindgen_anon_2: _NT_IORING_INFO__bindgen_ty_2,
}
impl Default for _NT_IORING_INFO {
    fn default() -> Self {
        _NT_IORING_INFO {
            IoRingVersion: _IORING_VERSION_IORING_VERSION_3,
            Flags: NT_IORING_CREATE_FLAGS {
                Required: _NT_IORING_CREATE_REQUIRED_FLAGS_NT_IORING_CREATE_REQUIRED_FLAG_NONE,
                Advisory: _NT_IORING_CREATE_ADVISORY_FLAGS_NT_IORING_CREATE_ADVISORY_FLAG_NONE,
            },
            SubmissionQueueSize: 0,
            SubmissionQueueRingMask: 0,
            CompletionQueueSize: 0,
            CompletionQueueRingMask: 0,
            __bindgen_anon_1: unsafe { ::std::mem::zeroed() },
            __bindgen_anon_2: unsafe { ::std::mem::zeroed() },
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_IORING_INFO__bindgen_ty_1 {
    pub SubmissionQueue: *mut NT_IORING_SUBMISSION_QUEUE,
    pub PadX86_SubmissionQueue: u64,
}
impl ::std::fmt::Debug for _NT_IORING_INFO__bindgen_ty_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("_NT_IORING_INFO__bindgen_ty_1")
    }
}
#[test]
fn bindgen_test_layout__NT_IORING_INFO__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_INFO__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_NT_IORING_INFO__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_INFO__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_INFO__bindgen_ty_1))
    );
    fn test_field_SubmissionQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_INFO__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SubmissionQueue) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_INFO__bindgen_ty_1),
                "::",
                stringify!(SubmissionQueue)
            )
        );
    }
    test_field_SubmissionQueue();
    fn test_field_PadX86_SubmissionQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_INFO__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PadX86_SubmissionQueue) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_INFO__bindgen_ty_1),
                "::",
                stringify!(PadX86_SubmissionQueue)
            )
        );
    }
    test_field_PadX86_SubmissionQueue();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_IORING_INFO__bindgen_ty_2 {
    pub CompletionQueue: *mut NT_IORING_COMPLETION_QUEUE,
    pub PadX86_CompletionQueue: u64,
}
impl ::std::fmt::Debug for _NT_IORING_INFO__bindgen_ty_2 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("_NT_IORING_INFO__bindgen_ty_2")
    }
}
#[test]
fn bindgen_test_layout__NT_IORING_INFO__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_INFO__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_NT_IORING_INFO__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_INFO__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_INFO__bindgen_ty_2))
    );
    fn test_field_CompletionQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_INFO__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompletionQueue) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_INFO__bindgen_ty_2),
                "::",
                stringify!(CompletionQueue)
            )
        );
    }
    test_field_CompletionQueue();
    fn test_field_PadX86_CompletionQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_INFO__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PadX86_CompletionQueue) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_INFO__bindgen_ty_2),
                "::",
                stringify!(PadX86_CompletionQueue)
            )
        );
    }
    test_field_PadX86_CompletionQueue();
}
#[test]
fn bindgen_test_layout__NT_IORING_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_INFO>(),
        48usize,
        concat!("Size of: ", stringify!(_NT_IORING_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_IORING_INFO))
    );
    fn test_field_IoRingVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IoRingVersion) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_INFO),
                "::",
                stringify!(IoRingVersion)
            )
        );
    }
    test_field_IoRingVersion();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_INFO),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_SubmissionQueueSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SubmissionQueueSize) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_INFO),
                "::",
                stringify!(SubmissionQueueSize)
            )
        );
    }
    test_field_SubmissionQueueSize();
    fn test_field_SubmissionQueueRingMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SubmissionQueueRingMask) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_INFO),
                "::",
                stringify!(SubmissionQueueRingMask)
            )
        );
    }
    test_field_SubmissionQueueRingMask();
    fn test_field_CompletionQueueSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompletionQueueSize) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_INFO),
                "::",
                stringify!(CompletionQueueSize)
            )
        );
    }
    test_field_CompletionQueueSize();
    fn test_field_CompletionQueueRingMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompletionQueueRingMask) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_INFO),
                "::",
                stringify!(CompletionQueueRingMask)
            )
        );
    }
    test_field_CompletionQueueRingMask();
}
pub type NT_IORING_INFO = _NT_IORING_INFO;
pub type PNT_IORING_INFO = *mut _NT_IORING_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NT_IORING_STRUCTV1 {
    pub IoRingVersion: IORING_VERSION,
    pub SubmissionQueueSize: u32,
    pub CompletionQueueSize: u32,
    pub Flags: NT_IORING_CREATE_FLAGS,
}
#[test]
fn bindgen_test_layout__NT_IORING_STRUCTV1() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_STRUCTV1>(),
        20usize,
        concat!("Size of: ", stringify!(_NT_IORING_STRUCTV1))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_STRUCTV1>(),
        4usize,
        concat!("Alignment of ", stringify!(_NT_IORING_STRUCTV1))
    );
    fn test_field_IoRingVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_STRUCTV1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IoRingVersion) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_STRUCTV1),
                "::",
                stringify!(IoRingVersion)
            )
        );
    }
    test_field_IoRingVersion();
    fn test_field_SubmissionQueueSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_STRUCTV1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SubmissionQueueSize) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_STRUCTV1),
                "::",
                stringify!(SubmissionQueueSize)
            )
        );
    }
    test_field_SubmissionQueueSize();
    fn test_field_CompletionQueueSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_STRUCTV1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompletionQueueSize) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_STRUCTV1),
                "::",
                stringify!(CompletionQueueSize)
            )
        );
    }
    test_field_CompletionQueueSize();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_STRUCTV1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_STRUCTV1),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
}
pub type NT_IORING_STRUCTV1 = _NT_IORING_STRUCTV1;
pub type PNT_IORING_STRUCTV1 = *mut _NT_IORING_STRUCTV1;
pub const _IORING_FEATURE_FLAGS_IORING_FEATURE_FLAGS_NONE: _IORING_FEATURE_FLAGS = 0;
pub const _IORING_FEATURE_FLAGS_IORING_FEATURE_UM_EMULATION: _IORING_FEATURE_FLAGS = 1;
pub const _IORING_FEATURE_FLAGS_IORING_FEATURE_SET_COMPLETION_EVENT: _IORING_FEATURE_FLAGS = 2;
pub type _IORING_FEATURE_FLAGS = ::std::os::raw::c_int;
pub use self::_IORING_FEATURE_FLAGS as IORING_FEATURE_FLAGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NT_IORING_CAPABILITIES {
    pub IoRingVersion: IORING_VERSION,
    pub MaxOpCode: IORING_OP_CODE,
    pub FlagsSupported: IORING_FEATURE_FLAGS,
    pub SubmissionQueueSize: u32,
    pub CompletionQueueSize: u32,
}
#[test]
fn bindgen_test_layout__NT_IORING_CAPABILITIES() {
    assert_eq!(
        ::std::mem::size_of::<_NT_IORING_CAPABILITIES>(),
        20usize,
        concat!("Size of: ", stringify!(_NT_IORING_CAPABILITIES))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_IORING_CAPABILITIES>(),
        4usize,
        concat!("Alignment of ", stringify!(_NT_IORING_CAPABILITIES))
    );
    fn test_field_IoRingVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CAPABILITIES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IoRingVersion) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CAPABILITIES),
                "::",
                stringify!(IoRingVersion)
            )
        );
    }
    test_field_IoRingVersion();
    fn test_field_MaxOpCode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CAPABILITIES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MaxOpCode) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CAPABILITIES),
                "::",
                stringify!(MaxOpCode)
            )
        );
    }
    test_field_MaxOpCode();
    fn test_field_FlagsSupported() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CAPABILITIES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FlagsSupported) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CAPABILITIES),
                "::",
                stringify!(FlagsSupported)
            )
        );
    }
    test_field_FlagsSupported();
    fn test_field_SubmissionQueueSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CAPABILITIES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SubmissionQueueSize) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CAPABILITIES),
                "::",
                stringify!(SubmissionQueueSize)
            )
        );
    }
    test_field_SubmissionQueueSize();
    fn test_field_CompletionQueueSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_NT_IORING_CAPABILITIES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompletionQueueSize) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_NT_IORING_CAPABILITIES),
                "::",
                stringify!(CompletionQueueSize)
            )
        );
    }
    test_field_CompletionQueueSize();
}
pub type NT_IORING_CAPABILITIES = _NT_IORING_CAPABILITIES;
pub type PNT_IORING_CAPABILITIES = *mut _NT_IORING_CAPABILITIES;
pub const _NT_IORING_INFO_CLASS_IoRingInvalid: _NT_IORING_INFO_CLASS = 0;
pub const _NT_IORING_INFO_CLASS_IoRingRegisterUserCompletionEventClass: _NT_IORING_INFO_CLASS = 1;
pub type _NT_IORING_INFO_CLASS = ::std::os::raw::c_int;
pub use self::_NT_IORING_INFO_CLASS as NT_IORING_INFO_CLASS;
extern "C" {
    pub fn NtSubmitIoRing(
        Handle: HANDLE,
        Flags: NT_IORING_CREATE_REQUIRED_FLAGS,
        WaitOperations: u32,
        Timeout: *mut u64,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtCreateIoRing(
        pIoRingHandle: PHANDLE,
        CreateParametersSize: u32,
        CreateParameters: PNT_IORING_STRUCTV1,
        OutputParametersSize: u32,
        pRingInfo: PNT_IORING_INFO,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtQueryIoRingCapabilities(
        CapabilitiesLength: size_t,
        Capabilities: PNT_IORING_CAPABILITIES,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtSetInformationIoRing(
        Handle: HANDLE,
        InformationClass: NT_IORING_INFO_CLASS,
        InformationLength: u32,
        IoRingInformation: *mut ::std::os::raw::c_void,
    ) -> NTSTATUS;
}
pub type PCSZ = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STRING {
    pub Length: USHORT,
    pub MaximumLength: USHORT,
    pub Buffer: PCHAR,
}
#[test]
fn bindgen_test_layout__STRING() {
    assert_eq!(
        ::std::mem::size_of::<_STRING>(),
        16usize,
        concat!("Size of: ", stringify!(_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<_STRING>(),
        8usize,
        concat!("Alignment of ", stringify!(_STRING))
    );
    fn test_field_Length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_STRING),
                "::",
                stringify!(Length)
            )
        );
    }
    test_field_Length();
    fn test_field_MaximumLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MaximumLength) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(_STRING),
                "::",
                stringify!(MaximumLength)
            )
        );
    }
    test_field_MaximumLength();
    fn test_field_Buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_STRING),
                "::",
                stringify!(Buffer)
            )
        );
    }
    test_field_Buffer();
}
pub type STRING = _STRING;
pub type PSTRING = *mut STRING;
pub type ANSI_STRING = STRING;
pub type PANSI_STRING = PSTRING;
pub type PCANSI_STRING = PSTRING;
pub type OEM_STRING = STRING;
pub type POEM_STRING = PSTRING;
pub type PCOEM_STRING = *const STRING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UNICODE_STRING {
    pub Length: USHORT,
    pub MaximumLength: USHORT,
    pub Buffer: PWSTR,
}
#[test]
fn bindgen_test_layout__UNICODE_STRING() {
    assert_eq!(
        ::std::mem::size_of::<_UNICODE_STRING>(),
        16usize,
        concat!("Size of: ", stringify!(_UNICODE_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<_UNICODE_STRING>(),
        8usize,
        concat!("Alignment of ", stringify!(_UNICODE_STRING))
    );
    fn test_field_Length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_UNICODE_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_UNICODE_STRING),
                "::",
                stringify!(Length)
            )
        );
    }
    test_field_Length();
    fn test_field_MaximumLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_UNICODE_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MaximumLength) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(_UNICODE_STRING),
                "::",
                stringify!(MaximumLength)
            )
        );
    }
    test_field_MaximumLength();
    fn test_field_Buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_UNICODE_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_UNICODE_STRING),
                "::",
                stringify!(Buffer)
            )
        );
    }
    test_field_Buffer();
}
pub type UNICODE_STRING = _UNICODE_STRING;
pub type PUNICODE_STRING = *mut UNICODE_STRING;
pub type PCUNICODE_STRING = *const UNICODE_STRING;
pub type KPRIORITY = LONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIENT_ID {
    pub UniqueProcess: HANDLE,
    pub UniqueThread: HANDLE,
}
#[test]
fn bindgen_test_layout__CLIENT_ID() {
    assert_eq!(
        ::std::mem::size_of::<_CLIENT_ID>(),
        16usize,
        concat!("Size of: ", stringify!(_CLIENT_ID))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIENT_ID>(),
        8usize,
        concat!("Alignment of ", stringify!(_CLIENT_ID))
    );
    fn test_field_UniqueProcess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_CLIENT_ID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UniqueProcess) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_CLIENT_ID),
                "::",
                stringify!(UniqueProcess)
            )
        );
    }
    test_field_UniqueProcess();
    fn test_field_UniqueThread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_CLIENT_ID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UniqueThread) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_CLIENT_ID),
                "::",
                stringify!(UniqueThread)
            )
        );
    }
    test_field_UniqueThread();
}
pub type CLIENT_ID = _CLIENT_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PEB_LDR_DATA {
    pub Reserved1: [BYTE; 8usize],
    pub Reserved2: [PVOID; 3usize],
    pub InMemoryOrderModuleList: LIST_ENTRY,
}
#[test]
fn bindgen_test_layout__PEB_LDR_DATA() {
    assert_eq!(
        ::std::mem::size_of::<_PEB_LDR_DATA>(),
        48usize,
        concat!("Size of: ", stringify!(_PEB_LDR_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_PEB_LDR_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_PEB_LDR_DATA))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB_LDR_DATA>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB_LDR_DATA),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB_LDR_DATA>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB_LDR_DATA),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
    fn test_field_InMemoryOrderModuleList() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB_LDR_DATA>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InMemoryOrderModuleList) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB_LDR_DATA),
                "::",
                stringify!(InMemoryOrderModuleList)
            )
        );
    }
    test_field_InMemoryOrderModuleList();
}
pub type PEB_LDR_DATA = _PEB_LDR_DATA;
pub type PPEB_LDR_DATA = *mut _PEB_LDR_DATA;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _LDR_DATA_TABLE_ENTRY {
    pub Reserved1: [PVOID; 2usize],
    pub InMemoryOrderLinks: LIST_ENTRY,
    pub Reserved2: [PVOID; 2usize],
    pub DllBase: PVOID,
    pub Reserved3: [PVOID; 2usize],
    pub FullDllName: UNICODE_STRING,
    pub Reserved4: [BYTE; 8usize],
    pub Reserved5: [PVOID; 3usize],
    pub __bindgen_anon_1: _LDR_DATA_TABLE_ENTRY__bindgen_ty_1,
    pub TimeDateStamp: ULONG,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _LDR_DATA_TABLE_ENTRY__bindgen_ty_1 {
    pub CheckSum: ULONG,
    pub Reserved6: PVOID,
}
#[test]
fn bindgen_test_layout__LDR_DATA_TABLE_ENTRY__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_LDR_DATA_TABLE_ENTRY__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_LDR_DATA_TABLE_ENTRY__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDR_DATA_TABLE_ENTRY__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_LDR_DATA_TABLE_ENTRY__bindgen_ty_1)
        )
    );
    fn test_field_CheckSum() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CheckSum) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY__bindgen_ty_1),
                "::",
                stringify!(CheckSum)
            )
        );
    }
    test_field_CheckSum();
    fn test_field_Reserved6() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved6) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY__bindgen_ty_1),
                "::",
                stringify!(Reserved6)
            )
        );
    }
    test_field_Reserved6();
}
#[test]
fn bindgen_test_layout__LDR_DATA_TABLE_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<_LDR_DATA_TABLE_ENTRY>(),
        136usize,
        concat!("Size of: ", stringify!(_LDR_DATA_TABLE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDR_DATA_TABLE_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_LDR_DATA_TABLE_ENTRY))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_InMemoryOrderLinks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InMemoryOrderLinks) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY),
                "::",
                stringify!(InMemoryOrderLinks)
            )
        );
    }
    test_field_InMemoryOrderLinks();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
    fn test_field_DllBase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DllBase) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY),
                "::",
                stringify!(DllBase)
            )
        );
    }
    test_field_DllBase();
    fn test_field_Reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY),
                "::",
                stringify!(Reserved3)
            )
        );
    }
    test_field_Reserved3();
    fn test_field_FullDllName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FullDllName) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY),
                "::",
                stringify!(FullDllName)
            )
        );
    }
    test_field_FullDllName();
    fn test_field_Reserved4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved4) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY),
                "::",
                stringify!(Reserved4)
            )
        );
    }
    test_field_Reserved4();
    fn test_field_Reserved5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved5) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY),
                "::",
                stringify!(Reserved5)
            )
        );
    }
    test_field_Reserved5();
    fn test_field_TimeDateStamp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDR_DATA_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDR_DATA_TABLE_ENTRY),
                "::",
                stringify!(TimeDateStamp)
            )
        );
    }
    test_field_TimeDateStamp();
}
pub type LDR_DATA_TABLE_ENTRY = _LDR_DATA_TABLE_ENTRY;
pub type PLDR_DATA_TABLE_ENTRY = *mut _LDR_DATA_TABLE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_USER_PROCESS_PARAMETERS {
    pub Reserved1: [BYTE; 16usize],
    pub Reserved2: [PVOID; 10usize],
    pub ImagePathName: UNICODE_STRING,
    pub CommandLine: UNICODE_STRING,
}
#[test]
fn bindgen_test_layout__RTL_USER_PROCESS_PARAMETERS() {
    assert_eq!(
        ::std::mem::size_of::<_RTL_USER_PROCESS_PARAMETERS>(),
        128usize,
        concat!("Size of: ", stringify!(_RTL_USER_PROCESS_PARAMETERS))
    );
    assert_eq!(
        ::std::mem::align_of::<_RTL_USER_PROCESS_PARAMETERS>(),
        8usize,
        concat!("Alignment of ", stringify!(_RTL_USER_PROCESS_PARAMETERS))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_RTL_USER_PROCESS_PARAMETERS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_RTL_USER_PROCESS_PARAMETERS),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_RTL_USER_PROCESS_PARAMETERS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_RTL_USER_PROCESS_PARAMETERS),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
    fn test_field_ImagePathName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_RTL_USER_PROCESS_PARAMETERS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ImagePathName) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_RTL_USER_PROCESS_PARAMETERS),
                "::",
                stringify!(ImagePathName)
            )
        );
    }
    test_field_ImagePathName();
    fn test_field_CommandLine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_RTL_USER_PROCESS_PARAMETERS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CommandLine) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_RTL_USER_PROCESS_PARAMETERS),
                "::",
                stringify!(CommandLine)
            )
        );
    }
    test_field_CommandLine();
}
pub type RTL_USER_PROCESS_PARAMETERS = _RTL_USER_PROCESS_PARAMETERS;
pub type PRTL_USER_PROCESS_PARAMETERS = *mut _RTL_USER_PROCESS_PARAMETERS;
pub type PPS_POST_PROCESS_INIT_ROUTINE = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PEB {
    pub Reserved1: [BYTE; 2usize],
    pub BeingDebugged: BYTE,
    pub Reserved2: [BYTE; 1usize],
    pub Reserved3: [PVOID; 2usize],
    pub Ldr: PPEB_LDR_DATA,
    pub ProcessParameters: PRTL_USER_PROCESS_PARAMETERS,
    pub Reserved4: [PVOID; 3usize],
    pub AtlThunkSListPtr: PVOID,
    pub Reserved5: PVOID,
    pub Reserved6: ULONG,
    pub Reserved7: PVOID,
    pub Reserved8: ULONG,
    pub AtlThunkSListPtr32: ULONG,
    pub Reserved9: [PVOID; 45usize],
    pub Reserved10: [BYTE; 96usize],
    pub PostProcessInitRoutine: PPS_POST_PROCESS_INIT_ROUTINE,
    pub Reserved11: [BYTE; 128usize],
    pub Reserved12: [PVOID; 1usize],
    pub SessionId: ULONG,
}
#[test]
fn bindgen_test_layout__PEB() {
    assert_eq!(
        ::std::mem::size_of::<_PEB>(),
        712usize,
        concat!("Size of: ", stringify!(_PEB))
    );
    assert_eq!(
        ::std::mem::align_of::<_PEB>(),
        8usize,
        concat!("Alignment of ", stringify!(_PEB))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_BeingDebugged() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BeingDebugged) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(BeingDebugged)
            )
        );
    }
    test_field_BeingDebugged();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
    fn test_field_Reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved3)
            )
        );
    }
    test_field_Reserved3();
    fn test_field_Ldr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ldr) as usize - ptr as usize
            },
            24usize,
            concat!("Offset of field: ", stringify!(_PEB), "::", stringify!(Ldr))
        );
    }
    test_field_Ldr();
    fn test_field_ProcessParameters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ProcessParameters) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(ProcessParameters)
            )
        );
    }
    test_field_ProcessParameters();
    fn test_field_Reserved4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved4) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved4)
            )
        );
    }
    test_field_Reserved4();
    fn test_field_AtlThunkSListPtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AtlThunkSListPtr) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(AtlThunkSListPtr)
            )
        );
    }
    test_field_AtlThunkSListPtr();
    fn test_field_Reserved5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved5) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved5)
            )
        );
    }
    test_field_Reserved5();
    fn test_field_Reserved6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved6) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved6)
            )
        );
    }
    test_field_Reserved6();
    fn test_field_Reserved7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved7) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved7)
            )
        );
    }
    test_field_Reserved7();
    fn test_field_Reserved8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved8) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved8)
            )
        );
    }
    test_field_Reserved8();
    fn test_field_AtlThunkSListPtr32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AtlThunkSListPtr32) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(AtlThunkSListPtr32)
            )
        );
    }
    test_field_AtlThunkSListPtr32();
    fn test_field_Reserved9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved9) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved9)
            )
        );
    }
    test_field_Reserved9();
    fn test_field_Reserved10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved10) as usize - ptr as usize
            },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved10)
            )
        );
    }
    test_field_Reserved10();
    fn test_field_PostProcessInitRoutine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PostProcessInitRoutine) as usize - ptr as usize
            },
            560usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(PostProcessInitRoutine)
            )
        );
    }
    test_field_PostProcessInitRoutine();
    fn test_field_Reserved11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved11) as usize - ptr as usize
            },
            568usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved11)
            )
        );
    }
    test_field_Reserved11();
    fn test_field_Reserved12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved12) as usize - ptr as usize
            },
            696usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(Reserved12)
            )
        );
    }
    test_field_Reserved12();
    fn test_field_SessionId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionId) as usize - ptr as usize
            },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(_PEB),
                "::",
                stringify!(SessionId)
            )
        );
    }
    test_field_SessionId();
}
pub type PEB = _PEB;
pub type PPEB = *mut _PEB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TEB {
    pub Reserved1: [PVOID; 12usize],
    pub ProcessEnvironmentBlock: PPEB,
    pub Reserved2: [PVOID; 399usize],
    pub Reserved3: [BYTE; 1952usize],
    pub TlsSlots: [PVOID; 64usize],
    pub Reserved4: [BYTE; 8usize],
    pub Reserved5: [PVOID; 26usize],
    pub ReservedForOle: PVOID,
    pub Reserved6: [PVOID; 4usize],
    pub TlsExpansionSlots: PVOID,
}
#[test]
fn bindgen_test_layout__TEB() {
    assert_eq!(
        ::std::mem::size_of::<_TEB>(),
        6024usize,
        concat!("Size of: ", stringify!(_TEB))
    );
    assert_eq!(
        ::std::mem::align_of::<_TEB>(),
        8usize,
        concat!("Alignment of ", stringify!(_TEB))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_TEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_TEB),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_ProcessEnvironmentBlock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_TEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ProcessEnvironmentBlock) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_TEB),
                "::",
                stringify!(ProcessEnvironmentBlock)
            )
        );
    }
    test_field_ProcessEnvironmentBlock();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_TEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_TEB),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
    fn test_field_Reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_TEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize
            },
            3296usize,
            concat!(
                "Offset of field: ",
                stringify!(_TEB),
                "::",
                stringify!(Reserved3)
            )
        );
    }
    test_field_Reserved3();
    fn test_field_TlsSlots() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_TEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TlsSlots) as usize - ptr as usize
            },
            5248usize,
            concat!(
                "Offset of field: ",
                stringify!(_TEB),
                "::",
                stringify!(TlsSlots)
            )
        );
    }
    test_field_TlsSlots();
    fn test_field_Reserved4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_TEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved4) as usize - ptr as usize
            },
            5760usize,
            concat!(
                "Offset of field: ",
                stringify!(_TEB),
                "::",
                stringify!(Reserved4)
            )
        );
    }
    test_field_Reserved4();
    fn test_field_Reserved5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_TEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved5) as usize - ptr as usize
            },
            5768usize,
            concat!(
                "Offset of field: ",
                stringify!(_TEB),
                "::",
                stringify!(Reserved5)
            )
        );
    }
    test_field_Reserved5();
    fn test_field_ReservedForOle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_TEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReservedForOle) as usize - ptr as usize
            },
            5976usize,
            concat!(
                "Offset of field: ",
                stringify!(_TEB),
                "::",
                stringify!(ReservedForOle)
            )
        );
    }
    test_field_ReservedForOle();
    fn test_field_Reserved6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_TEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved6) as usize - ptr as usize
            },
            5984usize,
            concat!(
                "Offset of field: ",
                stringify!(_TEB),
                "::",
                stringify!(Reserved6)
            )
        );
    }
    test_field_Reserved6();
    fn test_field_TlsExpansionSlots() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_TEB>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TlsExpansionSlots) as usize - ptr as usize
            },
            6016usize,
            concat!(
                "Offset of field: ",
                stringify!(_TEB),
                "::",
                stringify!(TlsExpansionSlots)
            )
        );
    }
    test_field_TlsExpansionSlots();
}
pub type TEB = _TEB;
pub type PTEB = *mut _TEB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OBJECT_ATTRIBUTES {
    pub Length: ULONG,
    pub RootDirectory: HANDLE,
    pub ObjectName: PUNICODE_STRING,
    pub Attributes: ULONG,
    pub SecurityDescriptor: PVOID,
    pub SecurityQualityOfService: PVOID,
}
#[test]
fn bindgen_test_layout__OBJECT_ATTRIBUTES() {
    assert_eq!(
        ::std::mem::size_of::<_OBJECT_ATTRIBUTES>(),
        48usize,
        concat!("Size of: ", stringify!(_OBJECT_ATTRIBUTES))
    );
    assert_eq!(
        ::std::mem::align_of::<_OBJECT_ATTRIBUTES>(),
        8usize,
        concat!("Alignment of ", stringify!(_OBJECT_ATTRIBUTES))
    );
    fn test_field_Length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_OBJECT_ATTRIBUTES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_OBJECT_ATTRIBUTES),
                "::",
                stringify!(Length)
            )
        );
    }
    test_field_Length();
    fn test_field_RootDirectory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_OBJECT_ATTRIBUTES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RootDirectory) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_OBJECT_ATTRIBUTES),
                "::",
                stringify!(RootDirectory)
            )
        );
    }
    test_field_RootDirectory();
    fn test_field_ObjectName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_OBJECT_ATTRIBUTES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ObjectName) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_OBJECT_ATTRIBUTES),
                "::",
                stringify!(ObjectName)
            )
        );
    }
    test_field_ObjectName();
    fn test_field_Attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_OBJECT_ATTRIBUTES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Attributes) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_OBJECT_ATTRIBUTES),
                "::",
                stringify!(Attributes)
            )
        );
    }
    test_field_Attributes();
    fn test_field_SecurityDescriptor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_OBJECT_ATTRIBUTES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SecurityDescriptor) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_OBJECT_ATTRIBUTES),
                "::",
                stringify!(SecurityDescriptor)
            )
        );
    }
    test_field_SecurityDescriptor();
    fn test_field_SecurityQualityOfService() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_OBJECT_ATTRIBUTES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SecurityQualityOfService) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_OBJECT_ATTRIBUTES),
                "::",
                stringify!(SecurityQualityOfService)
            )
        );
    }
    test_field_SecurityQualityOfService();
}
pub type OBJECT_ATTRIBUTES = _OBJECT_ATTRIBUTES;
pub type POBJECT_ATTRIBUTES = *mut OBJECT_ATTRIBUTES;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_STATUS_BLOCK {
    pub __bindgen_anon_1: _IO_STATUS_BLOCK__bindgen_ty_1,
    pub Information: ULONG_PTR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IO_STATUS_BLOCK__bindgen_ty_1 {
    pub Status: NTSTATUS,
    pub Pointer: PVOID,
}
#[test]
fn bindgen_test_layout__IO_STATUS_BLOCK__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_IO_STATUS_BLOCK__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_IO_STATUS_BLOCK__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_STATUS_BLOCK__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_STATUS_BLOCK__bindgen_ty_1))
    );
    fn test_field_Status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_STATUS_BLOCK__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_STATUS_BLOCK__bindgen_ty_1),
                "::",
                stringify!(Status)
            )
        );
    }
    test_field_Status();
    fn test_field_Pointer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_STATUS_BLOCK__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Pointer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_STATUS_BLOCK__bindgen_ty_1),
                "::",
                stringify!(Pointer)
            )
        );
    }
    test_field_Pointer();
}
#[test]
fn bindgen_test_layout__IO_STATUS_BLOCK() {
    assert_eq!(
        ::std::mem::size_of::<_IO_STATUS_BLOCK>(),
        16usize,
        concat!("Size of: ", stringify!(_IO_STATUS_BLOCK))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_STATUS_BLOCK>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_STATUS_BLOCK))
    );
    fn test_field_Information() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_STATUS_BLOCK>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Information) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_STATUS_BLOCK),
                "::",
                stringify!(Information)
            )
        );
    }
    test_field_Information();
}
pub type IO_STATUS_BLOCK = _IO_STATUS_BLOCK;
pub type PIO_STATUS_BLOCK = *mut _IO_STATUS_BLOCK;
pub type PIO_APC_ROUTINE = ::std::option::Option<
    unsafe extern "C" fn(ApcContext: PVOID, IoStatusBlock: PIO_STATUS_BLOCK, Reserved: ULONG),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_BASIC_INFORMATION {
    pub Reserved1: PVOID,
    pub PebBaseAddress: PPEB,
    pub Reserved2: [PVOID; 2usize],
    pub UniqueProcessId: ULONG_PTR,
    pub Reserved3: PVOID,
}
#[test]
fn bindgen_test_layout__PROCESS_BASIC_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_PROCESS_BASIC_INFORMATION>(),
        48usize,
        concat!("Size of: ", stringify!(_PROCESS_BASIC_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_PROCESS_BASIC_INFORMATION>(),
        8usize,
        concat!("Alignment of ", stringify!(_PROCESS_BASIC_INFORMATION))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PROCESS_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_PROCESS_BASIC_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_PebBaseAddress() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PROCESS_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PebBaseAddress) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_PROCESS_BASIC_INFORMATION),
                "::",
                stringify!(PebBaseAddress)
            )
        );
    }
    test_field_PebBaseAddress();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PROCESS_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_PROCESS_BASIC_INFORMATION),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
    fn test_field_UniqueProcessId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PROCESS_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UniqueProcessId) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_PROCESS_BASIC_INFORMATION),
                "::",
                stringify!(UniqueProcessId)
            )
        );
    }
    test_field_UniqueProcessId();
    fn test_field_Reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PROCESS_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_PROCESS_BASIC_INFORMATION),
                "::",
                stringify!(Reserved3)
            )
        );
    }
    test_field_Reserved3();
}
pub type PROCESS_BASIC_INFORMATION = _PROCESS_BASIC_INFORMATION;
pub type PPROCESS_BASIC_INFORMATION = *mut PROCESS_BASIC_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {
    pub IdleTime: LARGE_INTEGER,
    pub KernelTime: LARGE_INTEGER,
    pub UserTime: LARGE_INTEGER,
    pub Reserved1: [LARGE_INTEGER; 2usize],
    pub Reserved2: ULONG,
}
#[test]
fn bindgen_test_layout__SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION)
        )
    );
    fn test_field_IdleTime() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IdleTime) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION),
                "::",
                stringify!(IdleTime)
            )
        );
    }
    test_field_IdleTime();
    fn test_field_KernelTime() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelTime) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION),
                "::",
                stringify!(KernelTime)
            )
        );
    }
    test_field_KernelTime();
    fn test_field_UserTime() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserTime) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION),
                "::",
                stringify!(UserTime)
            )
        );
    }
    test_field_UserTime();
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
}
pub type SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION = _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;
pub type PSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION = *mut _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_PROCESS_INFORMATION {
    pub NextEntryOffset: ULONG,
    pub NumberOfThreads: ULONG,
    pub Reserved1: [BYTE; 48usize],
    pub ImageName: UNICODE_STRING,
    pub BasePriority: KPRIORITY,
    pub UniqueProcessId: HANDLE,
    pub Reserved2: PVOID,
    pub HandleCount: ULONG,
    pub SessionId: ULONG,
    pub Reserved3: PVOID,
    pub PeakVirtualSize: SIZE_T,
    pub VirtualSize: SIZE_T,
    pub Reserved4: ULONG,
    pub PeakWorkingSetSize: SIZE_T,
    pub WorkingSetSize: SIZE_T,
    pub Reserved5: PVOID,
    pub QuotaPagedPoolUsage: SIZE_T,
    pub Reserved6: PVOID,
    pub QuotaNonPagedPoolUsage: SIZE_T,
    pub PagefileUsage: SIZE_T,
    pub PeakPagefileUsage: SIZE_T,
    pub PrivatePageCount: SIZE_T,
    pub Reserved7: [LARGE_INTEGER; 6usize],
}
#[test]
fn bindgen_test_layout__SYSTEM_PROCESS_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_PROCESS_INFORMATION>(),
        256usize,
        concat!("Size of: ", stringify!(_SYSTEM_PROCESS_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_PROCESS_INFORMATION>(),
        8usize,
        concat!("Alignment of ", stringify!(_SYSTEM_PROCESS_INFORMATION))
    );
    fn test_field_NextEntryOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NextEntryOffset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(NextEntryOffset)
            )
        );
    }
    test_field_NextEntryOffset();
    fn test_field_NumberOfThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NumberOfThreads) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(NumberOfThreads)
            )
        );
    }
    test_field_NumberOfThreads();
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_ImageName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ImageName) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(ImageName)
            )
        );
    }
    test_field_ImageName();
    fn test_field_BasePriority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BasePriority) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(BasePriority)
            )
        );
    }
    test_field_BasePriority();
    fn test_field_UniqueProcessId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UniqueProcessId) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(UniqueProcessId)
            )
        );
    }
    test_field_UniqueProcessId();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
    fn test_field_HandleCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HandleCount) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(HandleCount)
            )
        );
    }
    test_field_HandleCount();
    fn test_field_SessionId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionId) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(SessionId)
            )
        );
    }
    test_field_SessionId();
    fn test_field_Reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(Reserved3)
            )
        );
    }
    test_field_Reserved3();
    fn test_field_PeakVirtualSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PeakVirtualSize) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(PeakVirtualSize)
            )
        );
    }
    test_field_PeakVirtualSize();
    fn test_field_VirtualSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VirtualSize) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(VirtualSize)
            )
        );
    }
    test_field_VirtualSize();
    fn test_field_Reserved4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved4) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(Reserved4)
            )
        );
    }
    test_field_Reserved4();
    fn test_field_PeakWorkingSetSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PeakWorkingSetSize) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(PeakWorkingSetSize)
            )
        );
    }
    test_field_PeakWorkingSetSize();
    fn test_field_WorkingSetSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkingSetSize) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(WorkingSetSize)
            )
        );
    }
    test_field_WorkingSetSize();
    fn test_field_Reserved5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved5) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(Reserved5)
            )
        );
    }
    test_field_Reserved5();
    fn test_field_QuotaPagedPoolUsage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QuotaPagedPoolUsage) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(QuotaPagedPoolUsage)
            )
        );
    }
    test_field_QuotaPagedPoolUsage();
    fn test_field_Reserved6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved6) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(Reserved6)
            )
        );
    }
    test_field_Reserved6();
    fn test_field_QuotaNonPagedPoolUsage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QuotaNonPagedPoolUsage) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(QuotaNonPagedPoolUsage)
            )
        );
    }
    test_field_QuotaNonPagedPoolUsage();
    fn test_field_PagefileUsage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PagefileUsage) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(PagefileUsage)
            )
        );
    }
    test_field_PagefileUsage();
    fn test_field_PeakPagefileUsage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PeakPagefileUsage) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(PeakPagefileUsage)
            )
        );
    }
    test_field_PeakPagefileUsage();
    fn test_field_PrivatePageCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PrivatePageCount) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(PrivatePageCount)
            )
        );
    }
    test_field_PrivatePageCount();
    fn test_field_Reserved7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PROCESS_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved7) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PROCESS_INFORMATION),
                "::",
                stringify!(Reserved7)
            )
        );
    }
    test_field_Reserved7();
}
pub type SYSTEM_PROCESS_INFORMATION = _SYSTEM_PROCESS_INFORMATION;
pub type PSYSTEM_PROCESS_INFORMATION = *mut _SYSTEM_PROCESS_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_THREAD_INFORMATION {
    pub Reserved1: [LARGE_INTEGER; 3usize],
    pub Reserved2: ULONG,
    pub StartAddress: PVOID,
    pub ClientId: CLIENT_ID,
    pub Priority: KPRIORITY,
    pub BasePriority: LONG,
    pub Reserved3: ULONG,
    pub ThreadState: ULONG,
    pub WaitReason: ULONG,
}
#[test]
fn bindgen_test_layout__SYSTEM_THREAD_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_THREAD_INFORMATION>(),
        80usize,
        concat!("Size of: ", stringify!(_SYSTEM_THREAD_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_THREAD_INFORMATION>(),
        8usize,
        concat!("Alignment of ", stringify!(_SYSTEM_THREAD_INFORMATION))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_THREAD_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_THREAD_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_THREAD_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_THREAD_INFORMATION),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
    fn test_field_StartAddress() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_THREAD_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StartAddress) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_THREAD_INFORMATION),
                "::",
                stringify!(StartAddress)
            )
        );
    }
    test_field_StartAddress();
    fn test_field_ClientId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_THREAD_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClientId) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_THREAD_INFORMATION),
                "::",
                stringify!(ClientId)
            )
        );
    }
    test_field_ClientId();
    fn test_field_Priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_THREAD_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Priority) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_THREAD_INFORMATION),
                "::",
                stringify!(Priority)
            )
        );
    }
    test_field_Priority();
    fn test_field_BasePriority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_THREAD_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BasePriority) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_THREAD_INFORMATION),
                "::",
                stringify!(BasePriority)
            )
        );
    }
    test_field_BasePriority();
    fn test_field_Reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_THREAD_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_THREAD_INFORMATION),
                "::",
                stringify!(Reserved3)
            )
        );
    }
    test_field_Reserved3();
    fn test_field_ThreadState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_THREAD_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ThreadState) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_THREAD_INFORMATION),
                "::",
                stringify!(ThreadState)
            )
        );
    }
    test_field_ThreadState();
    fn test_field_WaitReason() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_THREAD_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WaitReason) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_THREAD_INFORMATION),
                "::",
                stringify!(WaitReason)
            )
        );
    }
    test_field_WaitReason();
}
pub type SYSTEM_THREAD_INFORMATION = _SYSTEM_THREAD_INFORMATION;
pub type PSYSTEM_THREAD_INFORMATION = *mut _SYSTEM_THREAD_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_REGISTRY_QUOTA_INFORMATION {
    pub RegistryQuotaAllowed: ULONG,
    pub RegistryQuotaUsed: ULONG,
    pub Reserved1: PVOID,
}
#[test]
fn bindgen_test_layout__SYSTEM_REGISTRY_QUOTA_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_REGISTRY_QUOTA_INFORMATION>(),
        16usize,
        concat!("Size of: ", stringify!(_SYSTEM_REGISTRY_QUOTA_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_REGISTRY_QUOTA_INFORMATION>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_SYSTEM_REGISTRY_QUOTA_INFORMATION)
        )
    );
    fn test_field_RegistryQuotaAllowed() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_SYSTEM_REGISTRY_QUOTA_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegistryQuotaAllowed) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_REGISTRY_QUOTA_INFORMATION),
                "::",
                stringify!(RegistryQuotaAllowed)
            )
        );
    }
    test_field_RegistryQuotaAllowed();
    fn test_field_RegistryQuotaUsed() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_SYSTEM_REGISTRY_QUOTA_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegistryQuotaUsed) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_REGISTRY_QUOTA_INFORMATION),
                "::",
                stringify!(RegistryQuotaUsed)
            )
        );
    }
    test_field_RegistryQuotaUsed();
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<_SYSTEM_REGISTRY_QUOTA_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_REGISTRY_QUOTA_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
}
pub type SYSTEM_REGISTRY_QUOTA_INFORMATION = _SYSTEM_REGISTRY_QUOTA_INFORMATION;
pub type PSYSTEM_REGISTRY_QUOTA_INFORMATION = *mut _SYSTEM_REGISTRY_QUOTA_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_BASIC_INFORMATION {
    pub Reserved1: [BYTE; 24usize],
    pub Reserved2: [PVOID; 4usize],
    pub NumberOfProcessors: CCHAR,
}
#[test]
fn bindgen_test_layout__SYSTEM_BASIC_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_BASIC_INFORMATION>(),
        64usize,
        concat!("Size of: ", stringify!(_SYSTEM_BASIC_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_BASIC_INFORMATION>(),
        8usize,
        concat!("Alignment of ", stringify!(_SYSTEM_BASIC_INFORMATION))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_BASIC_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_BASIC_INFORMATION),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
    fn test_field_NumberOfProcessors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NumberOfProcessors) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_BASIC_INFORMATION),
                "::",
                stringify!(NumberOfProcessors)
            )
        );
    }
    test_field_NumberOfProcessors();
}
pub type SYSTEM_BASIC_INFORMATION = _SYSTEM_BASIC_INFORMATION;
pub type PSYSTEM_BASIC_INFORMATION = *mut _SYSTEM_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_TIMEOFDAY_INFORMATION {
    pub Reserved1: [BYTE; 48usize],
}
#[test]
fn bindgen_test_layout__SYSTEM_TIMEOFDAY_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_TIMEOFDAY_INFORMATION>(),
        48usize,
        concat!("Size of: ", stringify!(_SYSTEM_TIMEOFDAY_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_TIMEOFDAY_INFORMATION>(),
        1usize,
        concat!("Alignment of ", stringify!(_SYSTEM_TIMEOFDAY_INFORMATION))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_TIMEOFDAY_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_TIMEOFDAY_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
}
pub type SYSTEM_TIMEOFDAY_INFORMATION = _SYSTEM_TIMEOFDAY_INFORMATION;
pub type PSYSTEM_TIMEOFDAY_INFORMATION = *mut _SYSTEM_TIMEOFDAY_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_PERFORMANCE_INFORMATION {
    pub Reserved1: [BYTE; 312usize],
}
#[test]
fn bindgen_test_layout__SYSTEM_PERFORMANCE_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_PERFORMANCE_INFORMATION>(),
        312usize,
        concat!("Size of: ", stringify!(_SYSTEM_PERFORMANCE_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_PERFORMANCE_INFORMATION>(),
        1usize,
        concat!("Alignment of ", stringify!(_SYSTEM_PERFORMANCE_INFORMATION))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_PERFORMANCE_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_PERFORMANCE_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
}
pub type SYSTEM_PERFORMANCE_INFORMATION = _SYSTEM_PERFORMANCE_INFORMATION;
pub type PSYSTEM_PERFORMANCE_INFORMATION = *mut _SYSTEM_PERFORMANCE_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_EXCEPTION_INFORMATION {
    pub Reserved1: [BYTE; 16usize],
}
#[test]
fn bindgen_test_layout__SYSTEM_EXCEPTION_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_EXCEPTION_INFORMATION>(),
        16usize,
        concat!("Size of: ", stringify!(_SYSTEM_EXCEPTION_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_EXCEPTION_INFORMATION>(),
        1usize,
        concat!("Alignment of ", stringify!(_SYSTEM_EXCEPTION_INFORMATION))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_EXCEPTION_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_EXCEPTION_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
}
pub type SYSTEM_EXCEPTION_INFORMATION = _SYSTEM_EXCEPTION_INFORMATION;
pub type PSYSTEM_EXCEPTION_INFORMATION = *mut _SYSTEM_EXCEPTION_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_LOOKASIDE_INFORMATION {
    pub Reserved1: [BYTE; 32usize],
}
#[test]
fn bindgen_test_layout__SYSTEM_LOOKASIDE_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_LOOKASIDE_INFORMATION>(),
        32usize,
        concat!("Size of: ", stringify!(_SYSTEM_LOOKASIDE_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_LOOKASIDE_INFORMATION>(),
        1usize,
        concat!("Alignment of ", stringify!(_SYSTEM_LOOKASIDE_INFORMATION))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_LOOKASIDE_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_LOOKASIDE_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
}
pub type SYSTEM_LOOKASIDE_INFORMATION = _SYSTEM_LOOKASIDE_INFORMATION;
pub type PSYSTEM_LOOKASIDE_INFORMATION = *mut _SYSTEM_LOOKASIDE_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_INTERRUPT_INFORMATION {
    pub Reserved1: [BYTE; 24usize],
}
#[test]
fn bindgen_test_layout__SYSTEM_INTERRUPT_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_INTERRUPT_INFORMATION>(),
        24usize,
        concat!("Size of: ", stringify!(_SYSTEM_INTERRUPT_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_INTERRUPT_INFORMATION>(),
        1usize,
        concat!("Alignment of ", stringify!(_SYSTEM_INTERRUPT_INFORMATION))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_INTERRUPT_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_INTERRUPT_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
}
pub type SYSTEM_INTERRUPT_INFORMATION = _SYSTEM_INTERRUPT_INFORMATION;
pub type PSYSTEM_INTERRUPT_INFORMATION = *mut _SYSTEM_INTERRUPT_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_POLICY_INFORMATION {
    pub Reserved1: [PVOID; 2usize],
    pub Reserved2: [ULONG; 3usize],
}
#[test]
fn bindgen_test_layout__SYSTEM_POLICY_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_POLICY_INFORMATION>(),
        32usize,
        concat!("Size of: ", stringify!(_SYSTEM_POLICY_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_POLICY_INFORMATION>(),
        8usize,
        concat!("Alignment of ", stringify!(_SYSTEM_POLICY_INFORMATION))
    );
    fn test_field_Reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_POLICY_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_POLICY_INFORMATION),
                "::",
                stringify!(Reserved1)
            )
        );
    }
    test_field_Reserved1();
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_POLICY_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_POLICY_INFORMATION),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
}
pub type SYSTEM_POLICY_INFORMATION = _SYSTEM_POLICY_INFORMATION;
pub type PSYSTEM_POLICY_INFORMATION = *mut _SYSTEM_POLICY_INFORMATION;
pub const _FILE_INFORMATION_CLASS_FileDirectoryInformation: _FILE_INFORMATION_CLASS = 1;
pub type _FILE_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_FILE_INFORMATION_CLASS as FILE_INFORMATION_CLASS;
pub const _PROCESSINFOCLASS_ProcessBasicInformation: _PROCESSINFOCLASS = 0;
pub const _PROCESSINFOCLASS_ProcessDebugPort: _PROCESSINFOCLASS = 7;
pub const _PROCESSINFOCLASS_ProcessWow64Information: _PROCESSINFOCLASS = 26;
pub const _PROCESSINFOCLASS_ProcessImageFileName: _PROCESSINFOCLASS = 27;
pub const _PROCESSINFOCLASS_ProcessBreakOnTermination: _PROCESSINFOCLASS = 29;
pub type _PROCESSINFOCLASS = ::std::os::raw::c_int;
pub use self::_PROCESSINFOCLASS as PROCESSINFOCLASS;
pub const _THREADINFOCLASS_ThreadIsIoPending: _THREADINFOCLASS = 16;
pub const _THREADINFOCLASS_ThreadNameInformation: _THREADINFOCLASS = 38;
pub type _THREADINFOCLASS = ::std::os::raw::c_int;
pub use self::_THREADINFOCLASS as THREADINFOCLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _THREAD_NAME_INFORMATION {
    pub ThreadName: UNICODE_STRING,
}
#[test]
fn bindgen_test_layout__THREAD_NAME_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_THREAD_NAME_INFORMATION>(),
        16usize,
        concat!("Size of: ", stringify!(_THREAD_NAME_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_THREAD_NAME_INFORMATION>(),
        8usize,
        concat!("Alignment of ", stringify!(_THREAD_NAME_INFORMATION))
    );
    fn test_field_ThreadName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_THREAD_NAME_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ThreadName) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_THREAD_NAME_INFORMATION),
                "::",
                stringify!(ThreadName)
            )
        );
    }
    test_field_ThreadName();
}
pub type THREAD_NAME_INFORMATION = _THREAD_NAME_INFORMATION;
pub type PTHREAD_NAME_INFORMATION = *mut _THREAD_NAME_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_CODEINTEGRITY_INFORMATION {
    pub Length: ULONG,
    pub CodeIntegrityOptions: ULONG,
}
#[test]
fn bindgen_test_layout__SYSTEM_CODEINTEGRITY_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEM_CODEINTEGRITY_INFORMATION>(),
        8usize,
        concat!("Size of: ", stringify!(_SYSTEM_CODEINTEGRITY_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEM_CODEINTEGRITY_INFORMATION>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_SYSTEM_CODEINTEGRITY_INFORMATION)
        )
    );
    fn test_field_Length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_CODEINTEGRITY_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_CODEINTEGRITY_INFORMATION),
                "::",
                stringify!(Length)
            )
        );
    }
    test_field_Length();
    fn test_field_CodeIntegrityOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_SYSTEM_CODEINTEGRITY_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CodeIntegrityOptions) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_SYSTEM_CODEINTEGRITY_INFORMATION),
                "::",
                stringify!(CodeIntegrityOptions)
            )
        );
    }
    test_field_CodeIntegrityOptions();
}
pub type SYSTEM_CODEINTEGRITY_INFORMATION = _SYSTEM_CODEINTEGRITY_INFORMATION;
pub type PSYSTEM_CODEINTEGRITY_INFORMATION = *mut _SYSTEM_CODEINTEGRITY_INFORMATION;
pub const _SYSTEM_INFORMATION_CLASS_SystemBasicInformation: _SYSTEM_INFORMATION_CLASS = 0;
pub const _SYSTEM_INFORMATION_CLASS_SystemPerformanceInformation: _SYSTEM_INFORMATION_CLASS = 2;
pub const _SYSTEM_INFORMATION_CLASS_SystemTimeOfDayInformation: _SYSTEM_INFORMATION_CLASS = 3;
pub const _SYSTEM_INFORMATION_CLASS_SystemProcessInformation: _SYSTEM_INFORMATION_CLASS = 5;
pub const _SYSTEM_INFORMATION_CLASS_SystemProcessorPerformanceInformation:
    _SYSTEM_INFORMATION_CLASS = 8;
pub const _SYSTEM_INFORMATION_CLASS_SystemInterruptInformation: _SYSTEM_INFORMATION_CLASS = 23;
pub const _SYSTEM_INFORMATION_CLASS_SystemExceptionInformation: _SYSTEM_INFORMATION_CLASS = 33;
pub const _SYSTEM_INFORMATION_CLASS_SystemRegistryQuotaInformation: _SYSTEM_INFORMATION_CLASS = 37;
pub const _SYSTEM_INFORMATION_CLASS_SystemLookasideInformation: _SYSTEM_INFORMATION_CLASS = 45;
pub const _SYSTEM_INFORMATION_CLASS_SystemCodeIntegrityInformation: _SYSTEM_INFORMATION_CLASS = 103;
pub const _SYSTEM_INFORMATION_CLASS_SystemPolicyInformation: _SYSTEM_INFORMATION_CLASS = 134;
pub type _SYSTEM_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_SYSTEM_INFORMATION_CLASS as SYSTEM_INFORMATION_CLASS;
pub const _OBJECT_INFORMATION_CLASS_ObjectBasicInformation: _OBJECT_INFORMATION_CLASS = 0;
pub const _OBJECT_INFORMATION_CLASS_ObjectTypeInformation: _OBJECT_INFORMATION_CLASS = 2;
pub type _OBJECT_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_OBJECT_INFORMATION_CLASS as OBJECT_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PUBLIC_OBJECT_BASIC_INFORMATION {
    pub Attributes: ULONG,
    pub GrantedAccess: ACCESS_MASK,
    pub HandleCount: ULONG,
    pub PointerCount: ULONG,
    pub Reserved: [ULONG; 10usize],
}
#[test]
fn bindgen_test_layout__PUBLIC_OBJECT_BASIC_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_PUBLIC_OBJECT_BASIC_INFORMATION>(),
        56usize,
        concat!("Size of: ", stringify!(_PUBLIC_OBJECT_BASIC_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_PUBLIC_OBJECT_BASIC_INFORMATION>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_PUBLIC_OBJECT_BASIC_INFORMATION)
        )
    );
    fn test_field_Attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PUBLIC_OBJECT_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Attributes) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_PUBLIC_OBJECT_BASIC_INFORMATION),
                "::",
                stringify!(Attributes)
            )
        );
    }
    test_field_Attributes();
    fn test_field_GrantedAccess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PUBLIC_OBJECT_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GrantedAccess) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_PUBLIC_OBJECT_BASIC_INFORMATION),
                "::",
                stringify!(GrantedAccess)
            )
        );
    }
    test_field_GrantedAccess();
    fn test_field_HandleCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PUBLIC_OBJECT_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HandleCount) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_PUBLIC_OBJECT_BASIC_INFORMATION),
                "::",
                stringify!(HandleCount)
            )
        );
    }
    test_field_HandleCount();
    fn test_field_PointerCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PUBLIC_OBJECT_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PointerCount) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_PUBLIC_OBJECT_BASIC_INFORMATION),
                "::",
                stringify!(PointerCount)
            )
        );
    }
    test_field_PointerCount();
    fn test_field_Reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_PUBLIC_OBJECT_BASIC_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_PUBLIC_OBJECT_BASIC_INFORMATION),
                "::",
                stringify!(Reserved)
            )
        );
    }
    test_field_Reserved();
}
pub type PUBLIC_OBJECT_BASIC_INFORMATION = _PUBLIC_OBJECT_BASIC_INFORMATION;
pub type PPUBLIC_OBJECT_BASIC_INFORMATION = *mut _PUBLIC_OBJECT_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __PUBLIC_OBJECT_TYPE_INFORMATION {
    pub TypeName: UNICODE_STRING,
    pub Reserved: [ULONG; 22usize],
}
#[test]
fn bindgen_test_layout___PUBLIC_OBJECT_TYPE_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<__PUBLIC_OBJECT_TYPE_INFORMATION>(),
        104usize,
        concat!("Size of: ", stringify!(__PUBLIC_OBJECT_TYPE_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<__PUBLIC_OBJECT_TYPE_INFORMATION>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__PUBLIC_OBJECT_TYPE_INFORMATION)
        )
    );
    fn test_field_TypeName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__PUBLIC_OBJECT_TYPE_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TypeName) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__PUBLIC_OBJECT_TYPE_INFORMATION),
                "::",
                stringify!(TypeName)
            )
        );
    }
    test_field_TypeName();
    fn test_field_Reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__PUBLIC_OBJECT_TYPE_INFORMATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__PUBLIC_OBJECT_TYPE_INFORMATION),
                "::",
                stringify!(Reserved)
            )
        );
    }
    test_field_Reserved();
}
pub type PUBLIC_OBJECT_TYPE_INFORMATION = __PUBLIC_OBJECT_TYPE_INFORMATION;
pub type PPUBLIC_OBJECT_TYPE_INFORMATION = *mut __PUBLIC_OBJECT_TYPE_INFORMATION;
extern "C" {
    pub fn NtClose(Handle: HANDLE) -> NTSTATUS;
}
extern "C" {
    pub fn NtCreateFile(
        FileHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        AllocationSize: PLARGE_INTEGER,
        FileAttributes: ULONG,
        ShareAccess: ULONG,
        CreateDisposition: ULONG,
        CreateOptions: ULONG,
        EaBuffer: PVOID,
        EaLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtOpenFile(
        FileHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        ShareAccess: ULONG,
        OpenOptions: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtRenameKey(KeyHandle: HANDLE, NewName: PUNICODE_STRING) -> NTSTATUS;
}
extern "C" {
    pub fn NtNotifyChangeMultipleKeys(
        MasterKeyHandle: HANDLE,
        Count: ULONG,
        SubordinateObjects: *mut OBJECT_ATTRIBUTES,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        CompletionFilter: ULONG,
        WatchTree: BOOLEAN,
        Buffer: PVOID,
        BufferSize: ULONG,
        Asynchronous: BOOLEAN,
    ) -> NTSTATUS;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KEY_VALUE_ENTRY {
    pub ValueName: PUNICODE_STRING,
    pub DataLength: ULONG,
    pub DataOffset: ULONG,
    pub Type: ULONG,
}
#[test]
fn bindgen_test_layout__KEY_VALUE_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<_KEY_VALUE_ENTRY>(),
        24usize,
        concat!("Size of: ", stringify!(_KEY_VALUE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_KEY_VALUE_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_KEY_VALUE_ENTRY))
    );
    fn test_field_ValueName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_KEY_VALUE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ValueName) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_KEY_VALUE_ENTRY),
                "::",
                stringify!(ValueName)
            )
        );
    }
    test_field_ValueName();
    fn test_field_DataLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_KEY_VALUE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DataLength) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_KEY_VALUE_ENTRY),
                "::",
                stringify!(DataLength)
            )
        );
    }
    test_field_DataLength();
    fn test_field_DataOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_KEY_VALUE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DataOffset) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_KEY_VALUE_ENTRY),
                "::",
                stringify!(DataOffset)
            )
        );
    }
    test_field_DataOffset();
    fn test_field_Type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_KEY_VALUE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_KEY_VALUE_ENTRY),
                "::",
                stringify!(Type)
            )
        );
    }
    test_field_Type();
}
pub type KEY_VALUE_ENTRY = _KEY_VALUE_ENTRY;
pub type PKEY_VALUE_ENTRY = *mut _KEY_VALUE_ENTRY;
extern "C" {
    pub fn NtQueryMultipleValueKey(
        KeyHandle: HANDLE,
        ValueEntries: PKEY_VALUE_ENTRY,
        EntryCount: ULONG,
        ValueBuffer: PVOID,
        BufferLength: PULONG,
        RequiredBufferLength: PULONG,
    ) -> NTSTATUS;
}
pub const _KEY_SET_INFORMATION_CLASS_KeyWriteTimeInformation: _KEY_SET_INFORMATION_CLASS = 0;
pub const _KEY_SET_INFORMATION_CLASS_KeyWow64FlagsInformation: _KEY_SET_INFORMATION_CLASS = 1;
pub const _KEY_SET_INFORMATION_CLASS_KeyControlFlagsInformation: _KEY_SET_INFORMATION_CLASS = 2;
pub const _KEY_SET_INFORMATION_CLASS_KeySetVirtualizationInformation: _KEY_SET_INFORMATION_CLASS =
    3;
pub const _KEY_SET_INFORMATION_CLASS_KeySetDebugInformation: _KEY_SET_INFORMATION_CLASS = 4;
pub const _KEY_SET_INFORMATION_CLASS_KeySetHandleTagsInformation: _KEY_SET_INFORMATION_CLASS = 5;
pub const _KEY_SET_INFORMATION_CLASS_MaxKeySetInfoClass: _KEY_SET_INFORMATION_CLASS = 6;
pub type _KEY_SET_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_KEY_SET_INFORMATION_CLASS as KEY_SET_INFORMATION_CLASS;
extern "C" {
    pub fn NtSetInformationKey(
        KeyHandle: HANDLE,
        KeySetInformationClass: KEY_SET_INFORMATION_CLASS,
        KeySetInformation: PVOID,
        KeySetInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtDeviceIoControlFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        IoControlCode: ULONG,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtWaitForSingleObject(
        Handle: HANDLE,
        Alertable: BOOLEAN,
        Timeout: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlIsNameLegalDOS8Dot3(
        Name: PUNICODE_STRING,
        OemName: POEM_STRING,
        NameContainsSpaces: PBOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlNtStatusToDosError(Status: NTSTATUS) -> ULONG;
}
extern "C" {
    pub fn NtQueryInformationProcess(
        ProcessHandle: HANDLE,
        ProcessInformationClass: PROCESSINFOCLASS,
        ProcessInformation: PVOID,
        ProcessInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtQueryInformationThread(
        ThreadHandle: HANDLE,
        ThreadInformationClass: THREADINFOCLASS,
        ThreadInformation: PVOID,
        ThreadInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtSetInformationThread(
        ThreadHandle: HANDLE,
        ThreadInformationClass: THREADINFOCLASS,
        ThreadInformation: PVOID,
        ThreadInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtQueryObject(
        Handle: HANDLE,
        ObjectInformationClass: OBJECT_INFORMATION_CLASS,
        ObjectInformation: PVOID,
        ObjectInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtQuerySystemInformation(
        SystemInformationClass: SYSTEM_INFORMATION_CLASS,
        SystemInformation: PVOID,
        SystemInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn NtQuerySystemTime(SystemTime: PLARGE_INTEGER) -> NTSTATUS;
}
extern "C" {
    pub fn NtQueryTimerResolution(
        MaximumTime: PULONG,
        MinimumTime: PULONG,
        CurrentTime: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlLocalTimeToSystemTime(
        LocalTime: PLARGE_INTEGER,
        SystemTime: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlTimeToSecondsSince1970(Time: PLARGE_INTEGER, ElapsedSeconds: PULONG) -> BOOLEAN;
}
extern "C" {
    pub fn RtlFreeAnsiString(AnsiString: PANSI_STRING);
}
extern "C" {
    pub fn RtlFreeUnicodeString(UnicodeString: PUNICODE_STRING);
}
extern "C" {
    pub fn RtlFreeOemString(OemString: POEM_STRING);
}
extern "C" {
    pub fn RtlInitString(DestinationString: PSTRING, SourceString: PCSZ);
}
extern "C" {
    pub fn RtlInitStringEx(DestinationString: PSTRING, SourceString: PCSZ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlInitAnsiString(DestinationString: PANSI_STRING, SourceString: PCSZ);
}
extern "C" {
    pub fn RtlInitAnsiStringEx(DestinationString: PANSI_STRING, SourceString: PCSZ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlInitUnicodeString(DestinationString: PUNICODE_STRING, SourceString: PCWSTR);
}
extern "C" {
    pub fn RtlAnsiStringToUnicodeString(
        DestinationString: PUNICODE_STRING,
        SourceString: PCANSI_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlUnicodeStringToAnsiString(
        DestinationString: PANSI_STRING,
        SourceString: PCUNICODE_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlUnicodeStringToOemString(
        DestinationString: POEM_STRING,
        SourceString: PCUNICODE_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlUnicodeToMultiByteSize(
        BytesInMultiByteString: PULONG,
        UnicodeString: PWCH,
        BytesInUnicodeString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlCharToInteger(String: PCSZ, Base: ULONG, Value: PULONG) -> NTSTATUS;
}
extern "C" {
    pub fn RtlConvertSidToUnicodeString(
        UnicodeString: PUNICODE_STRING,
        Sid: PSID,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlUniform(Seed: PULONG) -> ULONG;
}
pub const _WINSTATIONINFOCLASS_WinStationInformation: _WINSTATIONINFOCLASS = 8;
pub type _WINSTATIONINFOCLASS = ::std::os::raw::c_int;
pub use self::_WINSTATIONINFOCLASS as WINSTATIONINFOCLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WINSTATIONINFORMATIONW {
    pub Reserved2: [BYTE; 70usize],
    pub LogonId: ULONG,
    pub Reserved3: [BYTE; 1140usize],
}
#[test]
fn bindgen_test_layout__WINSTATIONINFORMATIONW() {
    assert_eq!(
        ::std::mem::size_of::<_WINSTATIONINFORMATIONW>(),
        1216usize,
        concat!("Size of: ", stringify!(_WINSTATIONINFORMATIONW))
    );
    assert_eq!(
        ::std::mem::align_of::<_WINSTATIONINFORMATIONW>(),
        4usize,
        concat!("Alignment of ", stringify!(_WINSTATIONINFORMATIONW))
    );
    fn test_field_Reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_WINSTATIONINFORMATIONW>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_WINSTATIONINFORMATIONW),
                "::",
                stringify!(Reserved2)
            )
        );
    }
    test_field_Reserved2();
    fn test_field_LogonId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_WINSTATIONINFORMATIONW>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogonId) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_WINSTATIONINFORMATIONW),
                "::",
                stringify!(LogonId)
            )
        );
    }
    test_field_LogonId();
    fn test_field_Reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_WINSTATIONINFORMATIONW>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(_WINSTATIONINFORMATIONW),
                "::",
                stringify!(Reserved3)
            )
        );
    }
    test_field_Reserved3();
}
pub type WINSTATIONINFORMATIONW = _WINSTATIONINFORMATIONW;
pub type PWINSTATIONINFORMATIONW = *mut _WINSTATIONINFORMATIONW;
pub type PWINSTATIONQUERYINFORMATIONW = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: HANDLE,
        arg2: ULONG,
        arg3: WINSTATIONINFOCLASS,
        arg4: PVOID,
        arg5: ULONG,
        arg6: PULONG,
    ) -> BOOLEAN,
>;
#[repr(C)]
#[derive(Copy, Clone, Debug)]
pub struct win_ring {
    pub info: NT_IORING_INFO,
    pub handle: HANDLE,
}
#[test]
fn bindgen_test_layout_win_ring() {
    assert_eq!(
        ::std::mem::size_of::<win_ring>(),
        56usize,
        concat!("Size of: ", stringify!(win_ring))
    );
    assert_eq!(
        ::std::mem::align_of::<win_ring>(),
        8usize,
        concat!("Alignment of ", stringify!(win_ring))
    );
    fn test_field_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<win_ring>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(win_ring),
                "::",
                stringify!(info)
            )
        );
    }
    test_field_info();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<win_ring>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(win_ring),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
}
pub type win_ring_sqe = NT_IORING_SQE;
pub type win_ring_cqe = NT_IORING_CQE;
pub type win_ring_capabilities = NT_IORING_CAPABILITIES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACTIVATION_CONTEXT {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NET_ADDRESS_INFO_ {
    pub _address: u8,
}
extern "C" {
    pub fn win_ring_queue_init(entries: u32, ring: *mut win_ring) -> HRESULT;
}
extern "C" {
    pub fn win_ring_queue_init_ref(entries: u32) -> *mut win_ring;
}
extern "C" {
    pub fn win_ring_queue_exit(ring: *mut win_ring) -> HRESULT;
}
extern "C" {
    pub fn win_ring_query_capabilities(capabilities: *mut win_ring_capabilities) -> HRESULT;
}
extern "C" {
    pub fn win_ring_prep_nop(sqe: *mut win_ring_sqe);
}
extern "C" {
    pub fn win_ring_prep_read(
        sqe: *mut win_ring_sqe,
        file: NT_IORING_HANDLEREF,
        buffer: NT_IORING_BUFFERREF,
        sizeToRead: u32,
        fileOffset: u64,
        commonOpFlags: NT_IORING_OP_FLAGS,
    );
}
extern "C" {
    pub fn win_ring_prep_register_files(
        sqe: *mut win_ring_sqe,
        handles: *const HANDLE,
        count: ::std::os::raw::c_uint,
        flags: NT_IORING_REG_FILES_FLAGS,
        commonOpFlags: NT_IORING_OP_FLAGS,
    );
}
extern "C" {
    pub fn win_ring_prep_register_buffers(
        sqe: *mut win_ring_sqe,
        buffers: *const IORING_BUFFER_INFO,
        count: ::std::os::raw::c_uint,
        flags: NT_IORING_REG_BUFFERS_FLAGS,
        commonOpFlags: NT_IORING_OP_FLAGS,
    );
}
extern "C" {
    pub fn win_ring_prep_cancel(
        sqe: *mut win_ring_sqe,
        file: NT_IORING_HANDLEREF,
        cancelId: u64,
        commonOpFlags: NT_IORING_OP_FLAGS,
    );
}
extern "C" {
    pub fn win_ring_prep_write(
        sqe: *mut win_ring_sqe,
        file: NT_IORING_HANDLEREF,
        buffer: NT_IORING_BUFFERREF,
        sizeToWrite: u32,
        fileOffset: u64,
        flags: FILE_WRITE_FLAGS,
        commonOpFlags: NT_IORING_OP_FLAGS,
    );
}
extern "C" {
    pub fn win_ring_prep_flush(
        sqe: *mut win_ring_sqe,
        file: NT_IORING_HANDLEREF,
        flushMode: FILE_FLUSH_MODE,
        commonOpFlags: NT_IORING_OP_FLAGS,
    );
}
extern "C" {
    pub fn win_ring_sqe_set_flags(sqe: *mut win_ring_sqe, flags: NT_IORING_SQE_FLAGS);
}
extern "C" {
    pub fn win_ring_sqe_set_data(sqe: *mut win_ring_sqe, userData: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn win_ring_sqe_set_data64(sqe: *mut win_ring_sqe, userData: u64);
}
extern "C" {
    pub fn win_ring_sq_ready(ring: *const win_ring) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn win_ring_sq_space_left(ring: *const win_ring) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn win_ring_get_sqe(ring: *mut win_ring) -> *mut win_ring_sqe;
}
extern "C" {
    pub fn win_ring_submit_and_wait_timeout(
        ring: *mut win_ring,
        numberOfEntries: u32,
        timeout: u64,
    ) -> HRESULT;
}
extern "C" {
    pub fn win_ring_submit_and_wait(ring: *mut win_ring, numberOfEntries: u32) -> HRESULT;
}
extern "C" {
    pub fn win_ring_cqe_iter(ring: *mut win_ring, head: u32) -> *mut win_ring_cqe;
}
extern "C" {
    pub fn win_ring_submit(ring: *mut win_ring) -> HRESULT;
}
extern "C" {
    pub fn win_ring_cq_ready(ring: *const win_ring) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn win_ring_cq_space_left(ring: *const win_ring) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn win_ring_peek_cqe(ring: *const win_ring) -> *mut win_ring_cqe;
}
extern "C" {
    pub fn win_ring_wait_cqe(ring: *mut win_ring) -> *mut win_ring_cqe;
}
extern "C" {
    pub fn win_ring_cqe_get_data(cqe: *const win_ring_cqe) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn win_ring_cqe_get_data64(cqe: *const win_ring_cqe) -> u64;
}
extern "C" {
    pub fn win_ring_cq_clear(ring: *mut win_ring);
}
extern "C" {
    pub fn win_ring_cq_advance(ring: *mut win_ring, count: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn win_ring_cqe_seen(ring: *mut win_ring, cqe: *mut win_ring_cqe);
}
extern "C" {
    pub fn win_ring_register_event(ring: *mut win_ring, event: HANDLE) -> HRESULT;
}
